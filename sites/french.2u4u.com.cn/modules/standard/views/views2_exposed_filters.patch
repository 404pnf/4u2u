Index: includes/plugins.inc
===================================================================
RCS file: /cvs/drupal-contrib/contributions/modules/views/includes/plugins.inc,v
retrieving revision 1.7
diff -u -r1.7 plugins.inc
--- includes/plugins.inc	5 Jan 2008 01:29:28 -0000	1.7
+++ includes/plugins.inc	29 Jan 2008 13:36:28 -0000
@@ -187,7 +187,9 @@
   /**
    * Not all display plugins will support filtering
    */
-  function render_filters() { }
+  function render_filters() {
+    return drupal_get_form('views_view_form', $this->view);
+  }
 
   /**
    * Not all display plugins will have a 'more' link
Index: includes/handlers.inc
===================================================================
RCS file: /cvs/drupal-contrib/contributions/modules/views/includes/handlers.inc,v
retrieving revision 1.8
diff -u -r1.8 handlers.inc
--- includes/handlers.inc	16 Jan 2008 17:31:30 -0000	1.8
+++ includes/handlers.inc	29 Jan 2008 13:36:27 -0000
@@ -55,6 +55,42 @@
 }
 
 /**
+ * A list of and/or/nor.
+ */
+function views_handler_operator_andor() {
+  return array('AND' => t('Is All Of'), 'OR' => t('Is One Of'), 'NOR' => t('Is None Of'));
+}
+
+/**
+ * A list of or/nor.
+ */
+function views_handler_operator_or() {
+  return array('OR' => t('Is One Of'), 'NOR' => t('Is None Of'));
+}
+
+/**
+ * A list of equal or not equal to.
+ */
+function views_handler_operator_eqneq() {
+  return array('=' => t('Is Equal To'), '!=' => t('Is Not Equal To'));
+}
+
+ /**
+ * A list of greater / equal / less than
+ */
+function views_handler_operator_gtlt() {
+  return array('>' => t("Is Greater Than"), '>=' => t("Is Greater Than Or Equals"), '=' => t("Is Equal To"), '!=' => t("Is Not Equal To"), '<=' => t("Is Less Than Or Equals"), '<' => t("Is Less Than"));
+}
+
+/**
+ * A list of yes/no.
+ */
+function views_handler_operator_yesno() {
+  return array('1' => t('Yes'), '0' => t('No'));
+}
+
+
+/**
  * @defgroup views_join_handlers Views' join handlers
  * @{
  * Handlers to tell Views how to join tables together.
@@ -516,7 +552,11 @@
    * Perform any necessary changes to the form values prior to storage.
    * There is no need for this function to actually store the data.
    */
-  function operator_submit($form, &$form_state) { }
+  function operator_submit($form, &$form_state) {
+    if (isset($form_state['operator'])) {
+      $this->data->operator = $form_state['operator'];
+    }
+  }
 
   /**
    * Provide a form for setting options.
@@ -532,7 +572,11 @@
    * Perform any necessary changes to the form values prior to storage.
    * There is no need for this function to actually store the data.
    */
-  function value_submit($form, &$form_state) { }
+  function value_submit($form, &$form_state) {
+    if (isset($form_state['value'])) {
+      $this->data->value = $form_state['value'];
+    }
+  }
 
   /**
    * Add this filter to the query.
@@ -544,6 +588,110 @@
 }
 
 /**
+ * Filter handler useful for a list of options
+ */
+class views_handler_filter_list_options extends views_handler_filter {
+
+  /**
+   * Construct the views_handler_filter_list_options object.
+   */
+  function construct($list) {
+    $this->list = $list;
+  }
+
+  /**
+   * Initialize the options
+   */
+  function init(&$view, &$data) {
+    parent::init($view, $data);
+    $this->options += array('multiple' => FALSE, 'style' => 'select'); 
+  }
+
+  /**
+   * Provide some filter form display options
+   */
+  function options_form(&$form) {
+    $form['style'] = array(
+      '#title' => t('Form element style'),
+      '#type' => 'select',
+      '#options' => array(
+        'select' => t('Select'),
+        'checkboxes' => t('Checkboxes / Radio buttons'),
+      ),
+      '#default_value' => $this->options['style'],
+    );
+    $form['multiple'] = array(
+      '#title' => t('Allow the selection of multiple values'),
+      '#type' => 'checkbox',
+      '#default_value' => $this->options['multiple'],
+    );
+  }
+
+  /**
+   * Allow changing the operator
+   */
+  function operator_form(&$form) {
+    $form['operator'] = array(
+      '#title' => t('Operator'),
+      '#type' => 'select',
+      '#options' => $this->options['multiple'] ? views_handler_operator_or() : views_handler_operator_eqneq(),
+      '#default_value' => $this->data->operator,
+    );
+  }
+
+  /**
+   * Allow changing the filtered value(s)
+   */
+  function value_form(&$form) {
+    //invoke value_form_select / value_form_checkboxes to get the right value form
+    $function = 'value_form_'. $this->data->options['style'];
+    $this->$function($form);
+    //get the options and set them
+    $list = $this->list;
+    $form['value']['#options'] = is_array($list) ? $list : $list();
+  }
+
+  function value_form_select(&$form) {
+    $form['value'] = array(
+      '#title' => t('Value'),
+      '#type' => 'select',
+      '#multiple' => $this->options['multiple'],
+      '#default_value' => $this->data->value,
+    );
+  }
+
+  function value_form_checkboxes(&$form) {
+    $form['value'] = array(
+      '#title' => t('Value'),
+      '#type' => $this->options['multiple'] ? 'checkboxes' : 'radios',
+      '#default_value' => $this->data->value,
+    );
+  }
+
+  /**
+   * Add this filter to the query.
+   */
+  function query() {
+    $this->ensure_my_table();
+    //TODO: check & cleanup (multiple vs not) value data
+    if ($this->options['multiple']) {
+      $where = "$this->table_alias.$this->real_field ";
+      $where .= $this->data->operator == 'NOR' ? 'NOT IN ' : 'IN ';
+      $placeholder = array_fill(0, count($this->data->value), '%s');
+      $where .= "('". implode("','", $placeholder) ."')";
+
+      $this->query->add_where($this->data->group, $where, $this->data->value);
+    }
+    else {
+      if (!in_array($this->data->operator, array_keys(views_handler_operator_eqneq()))) {
+        $this->data->operator = '=';
+      } 
+      $this->query->add_where($this->data->group, "$this->table_alias.$this->real_field " . $this->data->operator . " '%s'", $this->data->value);
+    }
+  }
+}
+
+/**
  * @}
  */
 
Index: includes/view.inc
===================================================================
RCS file: /cvs/drupal-contrib/contributions/modules/views/includes/view.inc,v
retrieving revision 1.15
diff -u -r1.15 view.inc
--- includes/view.inc	29 Jan 2008 02:34:39 -0000	1.15
+++ includes/view.inc	29 Jan 2008 13:36:28 -0000
@@ -915,3 +915,48 @@
 /**
  * @}
  */
+
+/**
+ * Builds the form of a view. Shows exposed filters and sorts
+ */
+function views_view_form(&$form_state, $view) {
+  $form = array();
+  //build exposed filters
+  foreach ($view->filter as $key => $filter) {
+    if ($filter->exposed) {
+      $filter->handler->operator_form($form[$key]);
+      $filter->handler->value_form($form[$key]);
+    }
+  }
+  if ($form) {
+    $form_state['view'] = &$view;
+    $form['submit'] = array(
+      '#type' => 'submit',
+      '#value' => t('Switch'),
+    );
+    //$form['#method'] = 'get';
+    $form['#redirect'] = FALSE;
+  }
+  return $form;
+}
+
+function views_view_form_validate($form, &$form_state) {
+  $view = &$form_state['view'];
+  foreach ($view->filter as $key => $filter) {
+    if ($filter->exposed) {
+      $filter->handler->operator_validate($form, $form_state);
+      $filter->handler->value_validate($form, $form_state);
+    }
+  }
+}
+
+function views_view_form_submit($form, &$form_state) {
+  $view = &$form_state['view'];
+  //TODO: this comes to late as the view has already been built
+  foreach ($view->filter as $key => $filter) {
+    if ($filter->exposed) {
+      $filter->handler->operator_submit($form, $form_state);
+      $filter->handler->value_submit($form, $form_state);      
+    }
+  }
+}
Index: modules/node.views.inc
===================================================================
RCS file: /cvs/drupal-contrib/contributions/modules/views/modules/node.views.inc,v
retrieving revision 1.7
diff -u -r1.7 node.views.inc
--- modules/node.views.inc	18 Jan 2008 18:57:56 -0000	1.7
+++ modules/node.views.inc	29 Jan 2008 13:36:28 -0000
@@ -113,6 +113,11 @@
       'handler' => 'views_handler_field_node_type',
       'arguments' => array(TRUE),
     ),
+    // Information for accepting a node type as a filter
+    'filter' => array(
+      'handler' => 'views_handler_filter_list_options',
+      'arguments' => array(node_get_types('names')),
+    ),
     'argument' => array(
       'handler' => 'views_handler_argument_node_type',
     ),

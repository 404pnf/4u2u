package com.tmtdigital.dash.display.media{	import com.tmtdigital.dash.events.DashEvent;	import com.tmtdigital.dash.utils.Utils;	import com.tmtdigital.dash.config.Params;	import com.tmtdigital.dash.net.Gateway;   import com.tmtdigital.dash.display.media.IMedia;   import flash.display.*;   import flash.events.*;   import flash.media.*;   import flash.utils.*;   import flash.net.*;	import flash.system.Security;	import flash.external.ExternalInterface;   public class YouTubePlayer extends MovieClip implements IMedia   {		private static const PLAYER_URL:String="http://www.youtube.com/apiplayer?enablejsapi=1"            public function YouTubePlayer()      {			loadTimer = new Timer( 200 );			loadTimer.addEventListener( TimerEvent.TIMER, onLoadTimer );			loadTimer.stop();						playTimer = new Timer( 150 );			playTimer.addEventListener( TimerEvent.TIMER, onPlayTimer );			playTimer.stop();						readyTimer = new Timer( 300, 1 );			readyTimer.addEventListener( TimerEvent.TIMER, onReadyGo );			readyTimer.stop();      }      public function connect( stream:String ) : void      {			if( loader == null ) {				Security.allowDomain('*');				Security.allowInsecureDomain('*');				ExternalInterface.addCallback( "onYouTubeReady", onReady );				ExternalInterface.addCallback( "onYouTubeStateChange", onStateChange );				ExternalInterface.addCallback( "onYouTubeError", onError );														loader = new Loader(); 				loader.contentLoaderInfo.addEventListener( IOErrorEvent.IO_ERROR, onError );							var playerURL:String = PLAYER_URL;				var playerParams:String = Params.flashVars.playerparams;								playerURL += playerParams ? ("&" + playerParams) : "";				playerURL += "&playerapiid=" + Params.flashVars.id;				loader.load(new URLRequest(playerURL));				addChild(loader);			}			else {				dispatchEvent( new DashEvent( DashEvent.MEDIA_CONNECTED ) );			}      }		private function onReady() : void		{			dispatchEvent( new DashEvent( DashEvent.MEDIA_CONNECTED ) );		}		private function onReadyGo( event:TimerEvent ) : void		{			dispatchEvent( new DashEvent( DashEvent.MEDIA_READY ) );		}		private function onLoadTimer( event:TimerEvent )		{			dispatchEvent( new DashEvent( DashEvent.MEDIA_PROGRESS ) );		}				private function onPlayTimer( event:TimerEvent )		{			dispatchEvent( new DashEvent( DashEvent.MEDIA_UPDATE ) );		}		private function onStateChange( state:Number ) : void		{		   switch ( state ) {				case -1 :   // Unstarted					break;				case 0:     // Ended					if( playheadTime == totalTime ) {						_playing = false;						playTimer.stop();						loadTimer.stop();						dispatchEvent( new DashEvent( DashEvent.MEDIA_COMPLETE ) );					}					break;				case 1:     // Playing					dispatchEvent( new DashEvent( DashEvent.MEDIA_PLAYING ) );						break;				case 2:     // Paused							dispatchEvent( new DashEvent( DashEvent.MEDIA_PAUSED ) );						break;				case 3:     // Buffering	            _buffering = true;	            _playing = false;               dispatchEvent( new DashEvent( DashEvent.MEDIA_BUFFERING ) );									break;				case 5:     // Cued					if( !_loaded ) {						_loaded = true;						_buffering = false;						readyTimer.start();							}					break;			}		}	   private function getID(url:String) : String 	   {		   var arr = url.split('?');		   var str = '';		   for (var i in arr) {			   if(arr[i].substr(0,2) == 'v=') {				   str = arr[i].substr(2);			   }		   }		   if(str == '') { str = url.substr(url.indexOf('/v/')+3); }		   if(str.indexOf('&') > -1) { 			   str = str.substr(0,str.indexOf('&'));		   }		   return str;	   }      public function loadFile( _file:String ) : void      {			_loaded = false;			_playing = false;          _loadedFile = _file;         loadTimer.start();         ExternalInterface.call( "youTubeCue", Params.flashVars.id, getID(_file), 0 );      }      public function setSize( _width:Number, _height:Number ):void      {         ExternalInterface.call( "youTubeSetSize", Params.flashVars.id, _width, _height );      }      private function onError( error:Object = null ):void      {         _loaded = false;         _playing = false;			playTimer.stop();			loadTimer.stop();			trace( error );      }      public function set volume(vol:Number) : void      {			if( vol != _currentVol ) {         	_currentVol = vol;				ExternalInterface.call( "youTubeSetVolume", Params.flashVars.id, (vol * 100) );			}      }      public function playFile( _file:String ) : void      {			if( !_playing ) {				_playing = true;				ExternalInterface.call( "youTubePlay", Params.flashVars.id );  				playTimer.start();				dispatchEvent( new DashEvent( DashEvent.MEDIA_PLAYING ) );				}      }      public function pause() : void      {         _playing = false;			playTimer.stop();         ExternalInterface.call( "youTubePause", Params.flashVars.id );			         dispatchEvent( new DashEvent( DashEvent.MEDIA_PAUSED ) );							      }      public override function stop() : void      {         _loaded = false;         _playing = false;          playTimer.stop();         loadTimer.stop();         ExternalInterface.call("youTubePause", Params.flashVars.id );       }      public function seek( pos:Number ) : void      {         ExternalInterface.call( "youTubeSeek", Params.flashVars.id, pos, true );	         play();			      }      public function get bytesTotal() : Number      {         return ExternalInterface.call( "youTubeGetBytesTotal", Params.flashVars.id );      }      public function get bytesLoaded() : Number      {         return ExternalInterface.call( "youTubeGetBytesLoaded", Params.flashVars.id );      }      public function get totalTime():Number      {         return ExternalInterface.call( "youTubeGetDuration", Params.flashVars.id );      }      public function get playheadTime():Number      {         return ExternalInterface.call( "youTubeGetCurrentTime", Params.flashVars.id );            }      public function get ratio():Number      {			return 0;      }      public function get type():String      {         return "youtube";      }            public function get loaded():Boolean      {         return _loaded;      }            public function get loadedFile():String      {         return _loadedFile;             }            public function get playing() : Boolean      {         return _playing;      }            public function get buffering() : Boolean      {         return _buffering;      }					   private var loader:Loader = null;		private var loadTimer:Timer;		private var playTimer:Timer;		private var readyTimer:Timer;		      private var _playing:Boolean = false;	      private var _buffering:Boolean = false;      private var _loaded:Boolean = false;       private var _loadedFile:String = "";		private var _currentVol:Number = -1;   }}
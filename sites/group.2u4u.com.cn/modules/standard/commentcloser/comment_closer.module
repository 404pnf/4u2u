<?php
// $Id: comment_closer.module,v 1.10.2.2.2.13 2010/12/06 20:33:06 nancyw Exp $

/**
 * @file
 * comment_closer.module
 * Automatically close comments on nodes beyond a configurable age
 */

/**
 * Implements hook_help().
 */
function comment_closer_help($path, $arg) {
  switch ($path) {
    case 'admin/block/help':
      return t('<p>Automatically close comments</p>');
      break;
    case "admin/modules#description":
      $output = t('Schedule automatic closing of comments for selected node types based on the age of the node');
      break;
    case "admin/help#comment_closer":
      $output = t('<p>The commentcloser module allows you to automatically close comments via a cron hook. You can select any combination of available node types to process,</p><p>Configure the module to close comments on nodes more than one week, month or year old and schedule the closings to be done daily, weekly, monthly or annually</p>

      ');
      break;
    default:
      $output = "";
      break;
  }
  return $output;
}

function _comment_closer_nodeoptions() {
  static $nodeoptions = array();
  if (!$nodeoptions) {
    $nodetypes = node_get_types('names');
    foreach ($nodetypes as $type => $name) {
      $age_unit = variable_get("comment_closer_age_unit_$type", 'day');
      $age_num = variable_get("comment_closer_age_number_$type", 0);
      $com_limit = variable_get("comment_closer_comment_limit_$type", 0);

      if ($age_num || $com_limit) {
        $limits = array();
        if ($age_num) {
          $limits[] = $age_num . ' ' . t($age_unit);
        }
        if ($com_limit) {
          $limits[] = $com_limit . ' ' . t('comments');
        }
        $nodeoptions[$type] = t('@name (@age <a href="!edit?!ret">edit</a>)',
          array(
            '@name' => $name,
            '@age' => implode(', ', $limits),
            '!edit' => url("admin/content/node-type/$type"),
            '!ret' => drupal_get_destination(),
            ));
      }
    }
  }

  return $nodeoptions;
}

/**
 * Settings form.
 */
function comment_closer_settings() {
  $cc_form = array();
  $noyes = array(t('No'), t('Yes'));

  $cycle_length_list = array(
//    0 => 0,             // Never
    900 => 900,         // 15 mins
    1800 => 1800,       // 30 mins
    3600 => 3600,       // 1 hour
    7200 => 7200,       // 2 hours
    10800 => 10800,     // 3 hours
    14400 => 14400,     // 4 hours
    21600 => 21600,     // 6 hours
    28800 => 28800,     // 8 hours
    43200 => 43200,     // 12 hours
    86400 => 86400,     // 1 day
    172800 => 172800,   // 2 days
    259200 => 259200,   // 3 days
    604800 => 604800,   // 1 week
    );
  $cycle_length_list = array_map('format_interval', $cycle_length_list);
  $cycle_length_list[0] = t('Do not run');
  ksort($cycle_length_list);


  $cc_form['comment_closer_types'] = array(
    '#type' => 'markup',
    '#value' => '<label>' . t('Currently enabled content types') . '</label>'
      . theme('item_list', _comment_closer_nodeoptions()) . '<br />',
    '#prefix' => '<div class="form-item">',
    '#suffix' => '</div>',
    );

  $cc_form['comment_closer_cycle_period'] = array(
    '#type' => 'select', '#size' => 3,
    '#title' => t('Run every'),
    '#default_value' => variable_get('comment_closer_cycle_period', 86400),
    '#options' => $cycle_length_list,
    '#attributes' => array('class' => 'container-inline'),
    '#description' => t('This is the interval for running the comment close check. It will run at the next Cron cycle after this time elapses. <strong>Note</strong> that comments may stay open for this interval <u>longer</u> than specified for the content type.'),
    );

  $cc_form['comment_closer_user_block'] = array(
    '#type' => 'radios',
    '#title' => t('Disable comments for blocked users'),
    '#default_value' => variable_get('comment_closer_user_block', 0),
    '#options' => $noyes,
    '#attributes' => array('class' => 'container-inline'),
    '#description' => t('If you choose yes, the content types selected above for any user who is blocked will have comments disabled. This happens at the time the user is blocked.'),
    );

  return system_settings_form($cc_form);
}

/**
 * Implements hook_nodeapi().
 * Show a message about when the closing will happen.
 */
function comment_closer_nodeapi(&$node, $op, $teaser, $page) {
  // If we are on a cc node type and have enabled the notice, display it.
  if (variable_get("comment_closer_age_number_$node->type", 0)
    && variable_get("comment_closer_notice_$node->type", 0) == 1) {
    if ($op == 'view' && $page == TRUE) {
      $node->content['comment_closer_notice'] = array(
        '#value' => theme('comment_closer_notice', $node),
        // Put it at the bottom, close to the comments.
        '#weight' => 10,
      );
    }
  }
}

/**
 * Display a notice on nodes that comments will close.
 */
function theme_comment_closer_notice($node) {
  $age_num = variable_get("comment_closer_age_number_$node->type", 0);
  $age_unit = variable_get("comment_closer_age_unit_$node->type", 'day');

  $type = node_get_types('name', $node);

  // Is commenting active now?
  if ($node->comment == COMMENT_NODE_READ_WRITE) {
    $when = strtotime("+$age_num $age_unit", $node->created);

    $output = '<p class="comment-closer-notice">' . t('Commenting on this @type will be automatically closed on !when.',
      array(
        '!when' => format_date($when, 'custom', 'F j, Y'),
        '@type' => $type,
        )
      ) . '</p>';
  }
  else {
    $output = '<p class="comment-closer-notice">' . t('Commenting on this @type is closed.', array('@type' => $type)) . '</p>';
  }

  return $output;
}

/**
 * Implements hook_cron().
 */
function comment_closer_cron() {
  // Is it time to do anything?
  $now = isset($_SERVER['REQUEST_TIME']) ? $_SERVER['REQUEST_TIME'] : time();
  $next_cycle_time = variable_get('comment_closer_next_date', $now);
  $period = variable_get('comment_closer_cycle_period', 86400);
  if ($now < $next_cycle_time || $period == 0) {
    return;
  }

  $content_types = node_get_types('names');

  foreach ($content_types as $type => $name) {
    // Set it up.
    $age_num = variable_get("comment_closer_age_number_$type", 0);
    $age_unit = variable_get("comment_closer_age_unit_$type", 'day');
    $com_limit = variable_get("comment_closer_comment_limit_$type", 0);

    // If an age number is set, do this one.
    if ($age_num) {
      $oldest_allowed = _comment_closer_oldest_allowed($age_unit, $age_num, $now);

      // Knock it out.
      $query = "UPDATE {node} SET comment = 1 WHERE created < %d AND type = '%s'";
      $args = array($oldest_allowed, $type);
      $result = db_query($query, $args);
      $affected = db_affected_rows();
      if ($affected) {
        $vars = array(
          '!count' => $affected,
          '@types' => $name,
          '!date' => format_date($oldest_allowed),
          );
        $msg = 'Closed comments on !count @types posts created at, or before, !date.';
        watchdog('comment_closer', $msg, $vars, WATCHDOG_NOTICE);
      }
    }

    // If a comment limit is set, do this one.
    if ($com_limit) {
      $query = "UPDATE {node} n, {node_comment_statistics} ncs "
        . "SET n.comment = 1 "
        . "WHERE ncs.nid = n.nid AND n.comment = 2 "
        . "AND ncs.comment_count >= %d AND n.type = '%s' "
        ;
      $args = array($com_limit, $type);
      $result = db_query($query, $args);
      $affected = db_affected_rows();
      if ($affected) {
        $vars = array(
          '!count' => $affected,
          '@types' => $name,
          '!com_count' => number_format($com_limit),
          );
        $msg = 'Closed comments on !count @types posts with at least !com_count comments.';
        watchdog('comment_closer', $msg, $vars, WATCHDOG_NOTICE);
      }
    }
  }

  // Do it again tomorrow.
  variable_set('comment_closer_next_date', $next_cycle_time + $period);
}

/**
 * Helper function for generating date from age interval.
 */
function _comment_closer_oldest_allowed($unit, $num, $now = NULL) {
  if (!in_array($unit, array('day', 'week', 'month', 'year'))) {
    drupal_set_message(t('Invalid unit ("@unit")', array('@unit' => $unit)));
  }

  if ($num == 0) {
    return 0;
  }

  if (empty($now)) {
    $now = isset($_SERVER['REQUEST_TIME']) ? $_SERVER['REQUEST_TIME'] : time();
  }

  return strtotime("-$num $unit", $now);
}

/**
 * Implements hook_menu().
 */
function comment_closer_menu() {
  $items['admin/settings/comment_closer'] = array(
    'title' => 'Comment closer',
    'description' => 'Set age, frequency and types of nodes for which comments will be closed.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('comment_closer_settings'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function comment_closer_theme() {
  return array(
    'comment_closer_notice' => array('arguments' => array('node' => NULL)),
    );
}

/**
 * Implements hook_user().
 */
function comment_closer_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'after_update':
      if (variable_get('comment_closer_user_block', 0) && $account->status == 1 && $edit['status'] == 0) {
        $all_types = node_get_types('names');
        $node_types = array();

        // Process enabled content types.
        foreach ($all_types as $type => $name) {
          if (variable_get("comment_closer_age_number_$type", 0)) {
            $query = "UPDATE {node} SET comment = 1 WHERE comment = 2 AND uid = %d AND type = '%s'";
            db_query($query, $account->uid, $type);
            $count = db_affected_rows();
            if ($count) {
              drupal_set_message(t('Comments were closed on !count @types posts.',
                array('!count' => $count, '@types' => $name)));
            }
          }
        }
      }
  }
}

/**
 * Helper function for building a list an "and" before the last item.
 */
function _comment_closer_type_list($list) {
  $last = array_pop($list);
  return implode(', ', $list) . (count($list) > 1 ? ',' : NULL) . " and $last";
}

/**
 * Implements hook_form_alter().
 *
 * Add the settings to the node edit form.
 */
function comment_closer_form_alter(&$form, $form_state, $form_id) {
  $noyes = array(t('No'), t('Yes'));

  switch ($form_id) {
    case 'node_type_form':
      $type = $form['identity']['type']['#value'];

      // This setting should already be at the top, but force it.
      $form['comment']['comment']['#weight'] = -10;
      $form['comment']['comment']['#attributes'] = array('class' => 'container-inline');

      // Now we can add our settings directly below that.
      $form['comment']['comment_closer'] = array(
        '#type' => 'fieldset',
        '#title' => t('Comment Closer'),
        '#weight' => -9,
        );

      $form['comment']['comment_closer']['comment_closer_age'] = array(
        '#type' => 'fieldset',
        '#title' => t('Close commenting after'),
        '#description' => t('A number of days, weeks, months, or years before which new comments will be disabled. A value of 0 means to not close comments. This is only effective when comments are "Read/Write" (see above). Note: there is no check for the date being beyond the limit of a Unix timestamp (2038).'),
        );

      $units = array(
        'day' => t('days'),
        'week' => t('weeks'),
        'month' => t('months'),
        'year' => t('years'),
        );

      // ******** Grouped on one line ********
      $form['comment']['comment_closer']['comment_closer_age']['start'] = array(
        '#type' => 'markup',
        '#value' => '<table style="margin: 0 0 0 4em;"><tr>',
        );

      $form['comment']['comment_closer']['comment_closer_age']['comment_closer_age_number'] = array(
        '#type' => 'textfield',
        '#size' => 4,
        '#maxlength' => 2,
        '#default_value' => variable_get("comment_closer_age_number_$type", 0),
        '#element_validate' => array('_comment_closer_age_validate'),
        '#prefix' => '<td>',
        '#suffix' => '</td>',
        );

      $form['comment']['comment_closer']['comment_closer_age']['comment_closer_age_unit'] = array(
        '#type' => 'select',
        '#options' => $units,
        '#default_value' => variable_get("comment_closer_age_unit_$type", 'never'),
        '#prefix' => '<td>',
        '#suffix' => '</td>',
        );

      $form['comment']['comment_closer']['comment_closer_age']['end'] = array(
        '#type' => 'markup',
        '#value' => '</tr></table>',
        );
      // *****************************

      $form['comment']['comment_closer']['comment_closer_age']['or'] = array(
        '#type' => 'markup',
        '#value' => '<p style="margin-left: 5em;"><strong>' . t('- Or -') . '</strong></p>',
        );

      $form['comment']['comment_closer']['comment_closer_age']['comment_closer_comment_limit'] = array(
        '#type' => 'textfield',
        '#size' => 4,
        '#maxlength' => 4,
        '#field_suffix' => t('comments'),
        '#default_value' => variable_get("comment_closer_comment_limit_$type", 0),
        '#prefix' => '<div style="margin: 0 0 0 4em;">',
        '#suffix' => '</div>',
        '#description' => t('If the post receives this many comments, close off further commenting. Leave this at zero (0) for no limit.'),
        );

      // *****************************
      $form['comment']['comment_closer']['comment_closer_notice'] = array(
        '#type' => 'radios',
        '#title' => t('Display close notice on posts'),
        '#options' => $noyes,
        '#attributes' => array('class' => 'container-inline'),
        '#default_value' => variable_get("comment_closer_notice_$type", 0),
        '#description' => t('Checking "yes" will automatically display a notice at the bottom of all posts of enabled content types that states when comments will be closed.'),
        );

      // Add our submit handler in front of node's.
      array_unshift($form['#submit'], '_comment_closer_handle_interval');

      return;
  }
}

function _comment_closer_age_validate($element, &$form_state) {
  $age = $element['#value'];
  if (!is_numeric($age) || $age < 0 || $age != intval($age)) {
    form_error($element, t('The field "Close commenting after" should be a positive integer.'));
  }
}

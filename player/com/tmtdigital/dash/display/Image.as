/** * Copyright 2008 - TMTDigital LLC * * Author:   Travis Tidwell (www.travistidwell.com) * Version:  1.0 * Date:     January 12th, 2009 * * Description:   This class acts as an easy method for loading images *                in a MovieClip while retaining the image aspect ratio. * **/package com.tmtdigital.dash.display{   import com.tmtdigital.dash.config.Params;   import com.tmtdigital.dash.display.Skinable;   import com.tmtdigital.dash.utils.Utils;   import flash.net.*;   import flash.display.*;   import flash.geom.*;   import flash.events.*;   public class Image extends Skinable   {      public function Image( _skin:MovieClip )      {         super( _skin );      }   		public override function setSkin( _skin:MovieClip )		{			super.setSkin( _skin );			originalRect = new Rectangle( x, y, width, height);		}	      public function loadImage( imagePath:String, _onLoaded:Function = null, _resize:Boolean = true ) : void      {         onLoaded = _onLoaded;         resizeImage = _resize;                  // Only load an image who's path is defined.         if( skin && imagePath ) {            currentLoader = createImageLoader();                        var request:URLRequest=new URLRequest(imagePath);            if( !Params.flashVars.cache ) {               request.requestHeaders.push( new URLRequestHeader("pragma", "no-cache") );            }            // Try to load the image.            try {               currentLoader.load(request);            } catch (e:Error) {               trace( "Error loading image." );            }	         }      }      public function createImageLoader() : Loader      {         clearImage();         var loader:Loader = null;                  if( skin ) {            loader = new Loader();                        // Setup the event listener's for when the image gets loaded or if an error occurs.            loader.contentLoaderInfo.addEventListener( Event.COMPLETE, onImageLoaded );            loader.contentLoaderInfo.addEventListener( IOErrorEvent.IO_ERROR, onError );            loader.addEventListener( IOErrorEvent.IO_ERROR, onError );                 skin.addChild( loader );          }                  return loader;      }            public function clearImage()      {         if( skin ) {            var i:int = skin.numChildren;            while (i--)            {               var field:* = skin.getChildAt(i);               if (field is Loader) {                  field.unload();                  field.contentLoaderInfo.removeEventListener( Event.COMPLETE, onImageLoaded );                  field.contentLoaderInfo.removeEventListener( IOErrorEvent.IO_ERROR, onError );                  field.removeEventListener( IOErrorEvent.IO_ERROR, onError );                       skin.removeChild( field );               }            }         }      }                  public function resize( newRect:Rectangle )      {         if( skin ) {            if( currentLoader ) {               var imageRect:Rectangle = Utils.getScaledRect( _imageRatio, newRect );                        // Set the x, y, width, and height of this image loader.               currentLoader.width = imageRect.width;               currentLoader.height = imageRect.height;               currentLoader.x = imageRect.x;               currentLoader.y = imageRect.y;               }            }      }            /**       * Called when the image has finished loading.  Here we will will resize the image to fit       * inside of the parent movie clip while retaining the image aspect ratio.       *       * @param - The event object passed when this event gets triggered.       */      private function onImageLoaded( event:Event )      {         if (event.target) {                        var shouldResize:Boolean = resizeImage;            if( rootSkin && (rootSkin.onImageLoaded is Function) ) {               shouldResize = rootSkin.onImageLoaded( event.target, currentLoader, originalRect );            }                        if( shouldResize ) {               // Get the image ratio of the loaded image.               _imageRatio = event.target.width / event.target.height;                              // Resize to the image to our size.               resize( originalRect );            }            // Call our callback function.            if (onLoaded is Function) {               onLoaded();            }         }      }      /**       * Called when an error has occured loading the image.       *       * @param - The error object       */      private function onError( e:IOErrorEvent )      {         // For now, just give out a trace that an error has occured.         trace( e );      }      /**       * Used to get the ratio of the image loaded.       *       * @return - The ration of the loaded image.       */      public function get imageRatio():Number      {         return _imageRatio;      }      // The current loader variable.      private var currentLoader:Loader;		private var originalRect:Rectangle;      // To indicate if we should resize or not...      private var resizeImage:Boolean;      // The width/height ratio of the loaded image.      private var _imageRatio:Number = 1.3333;      // The callback function when the image has finished loading.      private var onLoaded:Function;   }}
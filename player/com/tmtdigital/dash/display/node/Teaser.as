/** * Copyright 2008 - TMTDigital LLC * * Author:   Travis Tidwell (www.travistidwell.com) * Version:  1.0 * Date:     June 9th, 2008 * * Description:  The teaser class is a dynamically created element that  * is added to the Playlist.  It represents a single node in the Dash Player. * **/package com.tmtdigital.dash.display.node{   import com.tmtdigital.dash.display.node.NodeBase;   import com.tmtdigital.dash.events.DashEvent;   import com.tmtdigital.dash.config.Params;   import flash.events.*;   import flash.display.*;   import fl.transitions.*;   import fl.transitions.easing.*;   import flash.net.*;   public class Teaser extends NodeBase   {      public function Teaser( _skin:MovieClip, _index:Number )      {         index = _index;         super( _skin );      }      public override function setSkin( _skin:MovieClip )      {			type = "teaser";			         super.setSkin( _skin );                  // Set the teaser control bar.         if( fields && fields.media.skin ) {            fields.media.setControlBar( "teaser" );         }						if( (!Params.flashVars.teaserplay && Params.flashVars.teaserselect) ) {				skin.buttonMode = true;				skin.mouseChildren = false;				skin.addEventListener( MouseEvent.MOUSE_OVER, onOver );				skin.addEventListener( MouseEvent.MOUSE_OUT, onOut );				skin.addEventListener( MouseEvent.MOUSE_DOWN, onDown );				skin.addEventListener( MouseEvent.MOUSE_UP, onUp );			}         if (rootSkin.onTeaserInit is Function) {            rootSkin.onTeaserInit( this );         }         visible = false;      }      public function setTeaserButton( buttonMC:MovieClip, selectable:Boolean )      {         if (buttonMC) {            buttonMC.buttonMode = false;            buttonMC.mouseChildren = true;            buttonMC.removeEventListener( MouseEvent.MOUSE_OVER, onOver );            buttonMC.removeEventListener( MouseEvent.MOUSE_OUT, onOut );            buttonMC.removeEventListener( MouseEvent.MOUSE_DOWN, onDown );            buttonMC.removeEventListener( MouseEvent.MOUSE_UP, onUp );            if (selectable) {               buttonMC.buttonMode = true;               buttonMC.mouseChildren = false;               buttonMC.addEventListener( MouseEvent.MOUSE_OVER, onOver );               buttonMC.addEventListener( MouseEvent.MOUSE_OUT, onOut );               buttonMC.addEventListener( MouseEvent.MOUSE_DOWN, onDown );               buttonMC.addEventListener( MouseEvent.MOUSE_UP, onUp );            }         }      }      public override function loadNode( _node:* = null ):Boolean      {         if( fields ) {            fields.selected = false;         }         selected = false;         return super.loadNode( _node );			      }      public override function onNodeLoad( _node:Object )      {         super.onNodeLoad( _node );         visible = true;			         if (rootSkin.onTeaserLoad is Function) {            rootSkin.onTeaserLoad( this );         }			      }      public function setSelect( select:Boolean )      {         if( fields ) {            fields.selected = select;         }         selected = select;           setTeaserButton( skin, (!selected || (!Params.flashVars.teaserplay && Params.flashVars.teaserselect)));         if (rootSkin.onTeaserSelect is Function) {            rootSkin.onTeaserSelect( this, selected );         }      }      public function onOver( e:MouseEvent )      {         if (rootSkin.onTeaserOver is Function) {            rootSkin.onTeaserOver( this );         }      }      public function onOut( e:MouseEvent )      {         if (rootSkin.onTeaserOut is Function) {            rootSkin.onTeaserOut( this );         }      }      public function onDown( e:MouseEvent )      {         if (rootSkin.onTeaserDown is Function) {            rootSkin.onTeaserDown( this );         }      }      public function onUp( e:MouseEvent = null )      {         if (rootSkin.onTeaserUp is Function) {            rootSkin.onTeaserUp( this );         }         loadTeaser();      }      public function loadTeaser()      {         if (Params.flashVars.pagelink && node) {            var path:String = Params.baseURL;            path += node.path ? ("/" + node.path) : (Params.flashVars.pagelinkarg + node.nid);            path += "/" + page + "/" + index;            navigateToURL(new URLRequest( path ), "_self");         }         else {            dispatchEvent( new DashEvent( DashEvent.TEASER_CLICK ) );         }      }      public var index:uint;      public var page:uint;      private var selected:Boolean;   }}
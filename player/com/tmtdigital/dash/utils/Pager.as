/** * Copyright 2008 - TMTDigital LLC * * Author:   Travis Tidwell (www.travistidwell.com) * Version:  1.0 * Date:     June 9th, 2008 * * Description:  This class handles the pagination of elements. * **/package com.tmtdigital.dash.utils{   import com.tmtdigital.dash.events.DashEvent;   import com.tmtdigital.dash.config.Params;   import flash.display.Sprite;   public class Pager extends Sprite   {      private static var NO_LOAD:String = "none";      private static var LOAD_FIRST:String = "first";      private static var LOAD_LAST:String = "last";      private static var LOAD_RAND:String = "rand";      /**       * Construct a new Pager       */      public function Pager( _shuffle:Boolean = false )      {         super();         currentIndex = 0;         pageIndex = 0;         pageLimit = 10;         numPages = 0;         numItems = 10;         load = _shuffle ? LOAD_RAND : LOAD_FIRST;         shuffle = _shuffle;      }      public function set loadState( _loadState:String )       {         load = _loadState;      }      public function get hasNextPage():Boolean      {         return ((pageIndex+1) < numPages);      }      public function get hasPrevPage():Boolean      {         return (pageIndex > 0);      }      /**       * Calculate the number of pages.       *       * @param - The total number of items.       */      public function setNumPages( totalItems:Number )      {         if ( totalItems && pageLimit && (pageIndex == 0) ) {            numPages = Math.ceil(totalItems / pageLimit);         }      }      /**       * After a page is loaded, this function should be called to set the number.       * of items in the page.       *       * @param - The number of elements on this page.       */      public function setNumItems( _numItems:Number )      {         numItems = _numItems;      }      /**             * Determines which index to load.             */      public function loadIndex()      {         if (load != NO_LOAD) {            switch ( load ) {               case LOAD_FIRST :                  currentIndex = 0;                  break;               case LOAD_LAST :                  currentIndex = (numItems - 1);                  break;               case LOAD_RAND :                  currentIndex = Utils.rand((numItems - 1));                  break;            }            load = NO_LOAD;            dispatchEvent( new DashEvent( DashEvent.LOAD_INDEX ) );         }      }      /**       * Loads the next element.       *       * @param - If this is the last page and last element, then we want to loop to        *          the first element on the first page.       */      public function loadNext( playAfter:Boolean = false )      {         if (shuffle) {            loadRandom( playAfter );         }         else {            // Increment the playlist index.            currentIndex++;            if ( currentIndex >= numItems ) {               currentIndex = (numItems - 1);               load = playAfter ? LOAD_FIRST : NO_LOAD;               nextPage( playAfter );            }            else {               dispatchEvent( new DashEvent( DashEvent.LOAD_INDEX ) );            }         }      }      /**       * Loads a random element.       */      public function loadRandom( playAfter:Boolean = false )      {         var newPage:Number = Utils.rand(numPages);                  if (newPage != pageIndex) {            load = playAfter ? LOAD_RAND:NO_LOAD;            pageIndex = newPage;            dispatchEvent( new DashEvent( DashEvent.LOAD_PAGE ) );         }         else {            // Load a random index in this page.            currentIndex = Utils.rand(numItems);            dispatchEvent( new DashEvent( DashEvent.LOAD_INDEX ) );         }      }      /**       * Loads the previous element.       *       * @param - Determine if this is the front page and first element, if we want to loop to        *          the last element on the last page.       */      public function loadPrev( playAfter:Boolean = false )      {         currentIndex--;         if ( currentIndex < 0 ) {            currentIndex = 0;            load = playAfter ? LOAD_LAST : NO_LOAD;            prevPage( playAfter );         }         else {            dispatchEvent( new DashEvent( DashEvent.LOAD_INDEX ) );         }      }      /**       * Loads the next page       *       * @param - Indicate if you would like to loop to the first page if       *          it is on the last page.       */      public function nextPage( playAfter:Boolean = false )      {         var pageLoaded:Boolean = false;			         if ( pageIndex < ( numPages - 1 ) ) {            pageIndex++;            pageLoaded = true;         }         else if ( Params.flashVars.loop ) {            load = playAfter ? LOAD_FIRST : NO_LOAD;            pageIndex = 0;            pageLoaded = true;				         }         if( pageLoaded ) {            dispatchEvent( new DashEvent( DashEvent.LOAD_PAGE ) );         }      }      /**       * Loads the previous page       *       * @param - Indicate if you would like to loop to the last page if       *          it is on the first page.       */      public function prevPage( playAfter:Boolean = false )      {         var pageLoaded:Boolean = false;			         if (pageIndex > 0) {            pageIndex--;            pageLoaded = true;				         }         else if ( Params.flashVars.loop ) {            load = playAfter ? LOAD_LAST : NO_LOAD;            pageIndex = (numPages - 1);            pageLoaded = true;				         }         if( pageLoaded ) {            dispatchEvent( new DashEvent( DashEvent.LOAD_PAGE ) );         }		      }      public var currentIndex:Number;      public var pageIndex:Number;      public var pageLimit:Number;      public var numPages:Number;            private var numItems:Number;      private var load:String;      private var shuffle:Boolean;   }}
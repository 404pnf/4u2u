<?php
// $Id: taxonomyblocks.module,v 1.21 2010/09/15 17:10:59 aaronhawkins Exp $
/**
 * @file
 * Taxonomyblocks module creates an interface for creating customized blocks for linking to taxonomy terms, views or callback functions.
 */

/**
 * Implementation of hook_menu().
 */
function taxonomyblocks_menu() {
  $items = array();
  $items['admin/settings/taxonomyblocks'] = array(
    'title'            => 'Advanced Taxonomy Blocks Configuration',
    'page callback'    => 'taxonomy_blocks_list',
    'access arguments' => array('administer taxonomy'),
    'type'             => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/taxonomyblocks/list'] = array(
    'title'  => 'List',
    'type'   => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/settings/taxonomyblocks/add'] = array(
    'title' => 'Add New Taxonomy Block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxonomy_blocks_add'),
    'access arguments' => array('administer taxonomy'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/taxonomyblocks/configure'] = array(
    'title' => 'Configure',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxonomy_blocks_config', 1),
    'access arguments' => array('administer taxonomy'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/taxonomyblocks/delete'] = array(
    'title' => 'Configure',
    'page callback' => 'taxonomy_blocks_delete',
    'access arguments' => array('administer taxonomy'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/taxonomyblocks/reset'] = array(
    'title' => 'Configure',
    'page callback' => 'taxonomy_blocks_reset',
    'access arguments' => array('administer taxonomy'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function taxonomy_blocks_list() {
  $header = array(t('Block title'), t('Actions'));
  $rows    = array();
  $token = drupal_get_token('tb_del');
  $result = db_query("SELECT tb_id, block_title, custom FROM {tb_added_list}");
  while ($tb_block = db_fetch_object($result)) {
    $row     = array();
    $links   = array();
    $row[]   = $tb_block->block_title;
    $links[] = l(t('Configure'), 'admin/settings/taxonomyblocks/configure/'. $tb_block->tb_id);
    $links[] = l(t('Reset'), 'admin/settings/taxonomyblocks/reset/'. $tb_block->tb_id .'-'. $token);
    if ($tb_block->tb_id != 0 && $tb_block->tb_id != 1) {
      $links[] = l(t('Delete'), 'admin/settings/taxonomyblocks/delete/'. $tb_block->tb_id .'-'. $token);
    }
    $row[]   = implode('&nbsp;&nbsp;&nbsp;&nbsp;', $links);
    $rows[]  = $row;
  }
  $output = theme('table', $header, $rows);
  return $output;
}

function taxonomy_blocks_add($form_state) {
  $form = array();
  $form['title'] = array(
    '#type' => 'textfield',
    '#size' => '64',
    '#title' => t('New Taxonomy Block Title'),
    '#default_value' => '',
    '#description' => t('This will create a new block to which you will be able to add a single vocabulary or multiple vocabularies.'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create New Block'),
  );
  return $form;
}
function taxonomy_blocks_add_submit($form, &$formstate) {
  $title = check_plain($formstate['values']['title']);
  $result = db_query("SELECT tb_id FROM {tb_added_list}");
  $x = 0;
  while ($tb = db_fetch_object($result)) {
    if ($x <= $tb->tb_id) {
      $x = $tb->tb_id;
    }
  }
  $tb_id = $x + 1;
  db_query("INSERT INTO {tb_added_list} (tb_id, block_title) VALUES (%d, '%s')", $tb_id, $title);
  
  drupal_set_message(t('Your block has been added'), $type = 'status', $repeat = FALSE);
  drupal_goto('admin/settings/taxonomyblocks/configure/'. $tb_id);
}
function taxonomy_blocks_reset($tb_id_token) {
  $tb_id_token = explode('-', $tb_id_token);
  $tb_id = $tb_id_token[0];
  $token = $tb_id_token[1];
  $valid = drupal_valid_token($token, 'tb_del');
  if ($valid != FALSE) {
    db_query("DELETE FROM {tb_customized} WHERE tb_id = %d", $tb_id);
    db_query("UPDATE {tb_added_list} SET custom = 0 WHERE tb_id = %d", $tb_id);
    if ($tb_id == 0) {
      db_query("UPDATE {tb_added_list} SET block_title = 'Categories' WHERE tb_id = 0");
    }
    if ($tb_id == 1) {
      db_query("UPDATE {tb_added_list} SET block_title = 'Forums' WHERE tb_id = 1");
    }
    drupal_set_message(t('The block has been reset'), $type = 'status', $repeat = FALSE);
    drupal_goto('admin/settings/taxonomyblocks');
  }
  else {
    drupal_access_denied();
  }
}
function taxonomy_blocks_delete($tb_id_token) {
  $tb_id_token = explode('-', $tb_id_token);
  $tb_id = $tb_id_token[0];
  $token = $tb_id_token[1];
  $valid = drupal_valid_token($token, 'tb_del');
  if ($valid != FALSE) {
    if ($tb_id != 0 && $tb_id != 1) {
      db_query("DELETE FROM {tb_customized} WHERE tb_id = %d", $tb_id);
      db_query("DELETE FROM {tb_added_list} WHERE tb_id = %d", $tb_id);
      db_query("DELETE FROM {blocks} WHERE module = 'taxonomyblocks' AND delta = %d", $tb_id);
      drupal_set_message(t('The block has been deleted'), $type = 'status', $repeat = FALSE);
      drupal_goto('admin/settings/taxonomyblocks');
    }
    else{
      drupal_set_message(t('You cannot delete default blocks'), $type = 'error', $repeat = FALSE);
      drupal_goto('admin/settings/taxonomyblocks');
    }
  }
  else {
    drupal_access_denied();
  }
}
function taxonomy_blocks_config() {
  $args = func_get_args();
  $tb_id = $args[2] ;
  $form = array();
  $form['tb_config_form'] = array('#tree' => TRUE);
      $form['tb_config_form']['vocab'] = array (
      '#type' => 'fieldset',
      '#title' => t('Configuration Options'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#tree' => TRUE,
    );
  if ($tb_id != 1) {
    $result = db_query("SELECT vid, name FROM {vocabulary} WHERE name <> 'Forums'");
  }
  else {
    $result = db_query("SELECT vid, name FROM {vocabulary} WHERE name = 'Forums'");
  }
  // We will later need to process this array to set defaults that were previously saved.
  $form['tb_config_form']['vocab_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Tid Options'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
    '#description' => t('Omitted terms will only be hidden from this block. These settings have no affect on the actual taxonomies.'),
  );
  $additional = variable_get('tb_additional', 0);
  while ($vocab = db_fetch_object($result)) {
    $vocab_array[] = $vocab->vid;
    //Check if vocab has been altered before checking specific defaults.
    $ismodified = '';
    $ismodified = db_result(db_query("SELECT custom FROM {tb_added_list} WHERE tb_id = %d", $tb_id));
        
    if ($ismodified == 1) {
      $enabled_set    = '';
      $counter_set    = '';
      $path_set       = '';
      $custom_title_set = '';
      $weight_set       = '';
      $custom_title_set = db_result(db_query("SELECT custom_title FROM {tb_customized} WHERE tb_id = %d and vid = %d", $tb_id, $vocab->vid));
      $enabled_set    = db_result(db_query("SELECT enabled FROM {tb_customized} WHERE tb_id = %d and vid = %d", $tb_id, $vocab->vid));
      $counter_set    = db_result(db_query("SELECT counter FROM {tb_customized} WHERE tb_id = %d and vid = %d", $tb_id, $vocab->vid));
      $path_set       = db_result(db_query("SELECT path_pattern FROM {tb_customized} WHERE tb_id = %d and vid = %d", $tb_id, $vocab->vid));
      $link_title_set = db_result(db_query("SELECT title_pattern FROM {tb_customized} WHERE tb_id = %d and vid = %d", $tb_id, $vocab->vid));
      $weight_set     = db_result(db_query("SELECT weight FROM {tb_customized} WHERE tb_id = %d and vid = %d", $tb_id, $vocab->vid));
      if (!empty($custom_title_set)) {
        $custom_title_def = $custom_title_set;
      }
      else {
        $custom_title_def = check_plain($vocab->name);
      }
      if (!empty($counter_set)) {
        $node_count_def = $counter_set;
      }
      else {
        $node_count_def = 'all';
      }
      if (!empty($path_set)) {
        $path_def = $path_set;
      }
      else {
        $path_def = 'taxonomy/term/%tid';
      }
      if (!empty($link_title_set)) {
        $link_title_def = $link_title_set;
      }
      else {
        $link_title_def = 'Content tagged with @termname';
      }
      if ($enabled_set == 1) {
        $enabled_def = TRUE;
      }
      else {
        $enabled_def = FALSE;
      }
      if (!empty($weight_set)) {
        $weight_def = $weight_set;
      }
      else {
        $weight_def = 0;
      }
    }
    if ($ismodified == 0) {
      
      if ($tb_id != 1) {
        $link_title_def = 'Content tagged with @termname';
        $path_def = 'taxonomy/term/%tid';
        $node_count_def = 'all';
      }
      if ($tb_id == 1 ) {
        $link_title_def = 'Forums categorized as @termname';
        $path_def = 'forum/%tid';
        $node_count_def = 'forum';
      }
      $enabled_def = TRUE;
      $custom_title_def = check_plain($vocab->name);
      $weight_def = 0;
    }
    $tb_id_omit_def = db_result(db_query("SELECT omit_tids FROM {tb_added_list} WHERE tb_id = %d", $tb_id));
    $omit_tids = explode(',', $tb_id_omit_def);
    $tb_id_open_def = db_result(db_query("SELECT open_tids FROM {tb_added_list} WHERE tb_id = %d", $tb_id));
    $open_tids = explode(',', $tb_id_open_def);
    $maintitle_def = db_result(db_query("SELECT block_title FROM {tb_added_list} WHERE tb_id = %d", $tb_id));
    $content_types = array();
    $content_types['all'] = t('All Content Types');
    
    if (is_array($additional)) {
      $children_def = $additional[$tb_id][$vocab->vid]['children_count'];
      $empty_def = $additional[$tb_id][$vocab->vid]['empty'];
    }
    
    $form['tb_config_form']['main_title'] = array(
      '#type' => 'textfield',
      '#title' => 'Main Title for block',
      '#default_value' => $maintitle_def,
    );
    $optionsresult = db_query("SELECT type FROM {vocabulary_node_types} WHERE vid = %d", $vocab->vid);
    while ($enabled = db_fetch_object($optionsresult)) {
      $type_readable = db_result(db_query("SELECT name from {node_type} WHERE type = '%s'", $enabled->type));
      $content_types[$enabled->type] = $type_readable;       
    }
    $content_types['none'] = t("Don't show node count");
  
    $form['tb_config_form']['vocab'][$vocab->vid] = array (
      '#type' => 'fieldset',
      '#title' => check_plain($vocab->name),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
    );
    $form['tb_config_form']['vocab'][$vocab->vid]['enable_vocab'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable'),
      '#default_value' => $enabled_def,
    );
    $form['tb_config_form']['vocab'][$vocab->vid]['node_count'] = array(
      '#type' => 'select',
      '#title' => t('Content type options for node count'),
      '#default_value' => $node_count_def,
      '#options' => $content_types,
    );
    $form['tb_config_form']['vocab'][$vocab->vid]['children_count'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show count of nodes belonging to children terms as well.'),
      '#default_value' => $children_def,
    );
    $form['tb_config_form']['vocab'][$vocab->vid]['empty'] = array(
      '#type' => 'checkbox',
      '#title' => t("Show terms that don't have nodes if at least one child term has a node."),
      '#default_value' => $empty_def,
    );
    $form['tb_config_form']['vocab'][$vocab->vid]['custom_title'] = array(
      '#type' => 'textfield',
      '#title' => t('Custom title for vocabulary'), 
      '#size' => 40,
      '#default_value' => $custom_title_def,
    );
    $form['tb_config_form']['vocab'][$vocab->vid]['path_pattern'] = array(
      '#type' => 'textfield',
      '#title' => t('Path pattern'),
      '#size' => 40,
      '#default_value' => $path_def,
      '#required' => TRUE,
    );
    $form['tb_config_form']['vocab'][$vocab->vid]['title_pattern'] = array(
      '#type' => 'textfield',
      '#title' => t('Link title pattern'),
      '#size' => 40,
      '#default_value' => $link_title_def,
      '#required' => TRUE,
    );
    $form['tb_config_form']['vocab'][$vocab->vid]['weight'] = array(
      '#type' => 'weight',
      '#title' => t('Weight'),
      '#default_value' => $weight_def,
     );
    $form['tb_config_form']['vocab'][$vocab->vid]['reset'] = array(
      '#type' => 'checkbox',
      '#title' => t('Reset settings for this vocab'),
      '#default_value' => FALSE,
    );
    $form['tb_config_form']['vocab_options']['vocab'][$vocab->vid]= array(
      '#type' => 'fieldset',
      '#title' => check_plain($vocab->name),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
    );
   
    $sub_result = db_query("SELECT tid, name FROM {term_data} WHERE vid = %d", $vocab->vid);
    while ($term = db_fetch_object($sub_result)) {
      $term_array[] = $term->tid;
      $form['tb_config_form']['vocab_options']['vocab'][$vocab->vid]['terms'][$term->tid]['name'] = array(
        '#value' => check_plain($term->name),
      );
      $form['tb_config_form']['vocab_options']['vocab'][$vocab->vid]['terms'][$term->tid]['omit'] = array(
        '#type' => 'checkbox',
        '#default_value' => in_array($term->tid, $omit_tids),
      );
      
      $form['tb_config_form']['vocab_options']['vocab'][$vocab->vid]['terms'][$term->tid]['open'] = array(
        '#type' => 'checkbox',
        '#default_value' => in_array($term->tid, $open_tids),
      );
      
    }
    $form['tb_config_form']['vocab_options']['vocab'][$vocab->vid]['term_array']= array(
      '#type' => 'value',
      '#value' => $term_array,
    ); 
 
  }
  $form['tb_config_form']['reset_all'] = array(
    '#type' => 'checkbox',
    '#title' => 'Reset All',
    '#default_value' => FALSE,
  );
  $form['tb_config_form']['save_edit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Configuration'),
  );
  $form['tb_config_form']['#theme'] = 'taxonomy_blocks_config_list';
  $form['tb_config_form']['tb_id']  = array(
    '#type' => 'value',
    '#value' => $tb_id,
  );
  $form['tb_config_form']['vocab_array']  = array(
    '#type' => 'value',
    '#value' => $vocab_array,
  );
  return $form;
}
function theme_taxonomy_blocks_config_list($form) {
  $output .= drupal_render($form['main_title']);
  if (!empty($form['vocab_array']['#value'])) {
    foreach ($form['vocab_array']['#value'] as $vid) {
      $header = array(t('Term'), t('Omit'), t('Expanded by default'));
      $rows = array();
      $form['vocab_options']['vocab'][$vid]['table']['#value'] = array();
      if (!empty($form['vocab_options']['vocab'][$vid]['term_array']['#value'])) {
        foreach ($form['vocab_options']['vocab'][$vid]['term_array']['#value'] as $tid) {
          $row = array();
          if (!empty($form['vocab_options']['vocab'][$vid]['terms'][$tid]['name'])) {
            $row[]  = drupal_render($form['vocab_options']['vocab'][$vid]['terms'][$tid]['name']);
          }
          if (!empty($form['vocab_options']['vocab'][$vid]['terms'][$tid]['omit'])) {
            $row[]  = drupal_render($form['vocab_options']['vocab'][$vid]['terms'][$tid]['omit']);
          }
          if (!empty($form['vocab_options']['vocab'][$vid]['terms'][$tid]['open'])) {
            $row[]  = drupal_render($form['vocab_options']['vocab'][$vid]['terms'][$tid]['open']);
          }
          if (!empty($row)) {
            $rows[] = $row;
          }
        }
      }
      //var_dump($rows);
      $form['vocab_options']['vocab'][$vid]['table'] = array('#value' => theme('table', $header, $rows));
    }
  }
  $output .= drupal_render($form);
  return $output;
}
function taxonomy_blocks_config_submit($form, $formstate) {
  $additional = variable_get('tb_additional', array());
  $vid_array = $formstate['values']['tb_config_form']['vocab_array'];
  $omit_tids_checked = array();
  $open_tids_checked = array();
  if (!empty($vid_array)) {
    foreach ($vid_array as $vid) {
      $tid_array = $formstate['values']['tb_config_form']['vocab_options']['vocab'][$vid]['term_array'];   
      if (!empty($tid_array)) {
        foreach ($tid_array as $tid) {
          if ($formstate['values']['tb_config_form']['vocab_options']['vocab'][$vid]['terms'][$tid]['omit'] == TRUE) {
            $omit_tids_checked[] = $tid;
          }
          if ($formstate['values']['tb_config_form']['vocab_options']['vocab'][$vid]['terms'][$tid]['open'] == TRUE) {
            $open_tids_checked[] = $tid;
          }
        }
      }
      
    }
  }
  $tb_id = $formstate['values']['tb_config_form']['tb_id'];
  if ($formstate['values']['tb_config_form']['vocab'][$vid]['reset'] == FALSE) {
    $maintitle = $formstate['values']['tb_config_form']['main_title'];
    db_query("UPDATE {tb_added_list} SET block_title = '%s' WHERE tb_id = %d", $maintitle, $tb_id);
  }
  if (!empty($vid_array)) {
    foreach ($vid_array as $vid) {
      if ($formstate['values']['tb_config_form']['vocab'][$vid]['reset'] == FALSE) {
        $enabled_array[] = $vid;
        $titlepattern = '';
        $pathpattern  = '';
        $node_count   = '';
        $weight       = '';
        if ($formstate['values']['tb_config_form']['vocab'][$vid]['custom_title'] != '<none>') {
          $customtitle  = check_plain($formstate['values']['tb_config_form']['vocab'][$vid]['custom_title']);
        }
        else {
          $customtitle  =  $formstate['values']['tb_config_form']['vocab'][$vid]['custom_title'];
        }
        $titlepattern = check_plain($formstate['values']['tb_config_form']['vocab'][$vid]['title_pattern']);
        $pathpattern  = check_plain($formstate['values']['tb_config_form']['vocab'][$vid]['path_pattern']);
        $node_count   = $formstate['values']['tb_config_form']['vocab'][$vid]['node_count'];
        $empty        = $formstate['values']['tb_config_form']['vocab'][$vid]['empty'];
        $ch_count     = $formstate['values']['tb_config_form']['vocab'][$vid]['children_count'];
        $additional[$tb_id][$vid]['children_count'] = $ch_count;
        $additional[$tb_id][$vid]['empty'] = $empty;
        $weight       = $formstate['values']['tb_config_form']['vocab'][$vid]['weight'];
        $enabled      = $formstate['values']['tb_config_form']['vocab'][$vid]['enable_vocab'];
        if ($enabled == TRUE) {
          $enabled = 1;
        }
        else {
          $enabled = 0;
        }
        db_query("UPDATE {tb_added_list} SET custom = 1 WHERE tb_id = %d", $tb_id);
        db_query("DELETE FROM {tb_customized} WHERE tb_id = %d AND vid = %d", $tb_id, $vid);
        db_query("INSERT INTO {tb_customized} (tb_id, vid, custom_title, path_pattern, title_pattern, counter, weight, enabled) VALUES (%d, %d, '%s', '%s', '%s', '%s', %d, %d)", $tb_id, $vid, $customtitle, $pathpattern, $titlepattern, $node_count, $weight, $enabled);
        variable_set('tb_additional', $additional);
      }
      elseif ($formstate['values']['tb_config_form']['vocab'][$vid]['reset'] == TRUE) {
        db_query("DELETE FROM {tb_customized} WHERE tb_id = %d AND vid = %d", $tb_id, $vid);
        $additional[$tb_id][$vid]['empty'] = array();
        $additional[$tb_id][$vid]['children_count'] = array();
        variable_set('tb_additional', $additional);
      }
    }
    $omit_tids = implode(',', $omit_tids_checked);
    $open_tids = implode(',', $open_tids_checked);
    db_query("UPDATE {tb_added_list} SET omit_tids = '%s', open_tids = '%s', custom = 1 WHERE tb_id = %d", $omit_tids, $open_tids, $tb_id);
    if ($formstate['values']['tb_config_form']['reset_all'] == TRUE) {
        taxonomy_blocks_reset($tb_id);
        $additional[$tb_id] = array();
        variable_set('tb_additional', $additional);
    }
    
  }
    drupal_set_message(t('Your changes have been saved'), $type = 'status', $repeat = FALSE );
    drupal_goto('admin/settings/taxonomyblocks');
}
  
  


/**
 * Implementation of hook_block().
 */
function taxonomyblocks_block($op = 'list', $delta = 0, $edit = array()) {
  $result = db_query("SELECT tb_id FROM {tb_added_list}");
  $tb_list = array();
  while ($tb = db_fetch_object($result)) {
    $tb_list[] = $tb->tb_id;
  }
  switch ($op) {
    case 'list':
      foreach ($tb_list as $item) {
        $blockinfo = db_result(db_query("SELECT block_title FROM {tb_added_list} WHERE tb_id = %d", $item));
        $blockinfo = $blockinfo .' - Taxonomy Block';
        $blocks[$item]['info'] = $blockinfo;
        $blocks[$item]['cache'] = BLOCK_NO_CACHE;
      }
      
    return $blocks;
    case 'view':
      foreach ($tb_list as $item) {
        if ($item != 1) {
          if ($delta == $item) {
            $block['subject'] = db_result(db_query("SELECT block_title FROM {tb_added_list} WHERE tb_id = %d", $item));
            $block['content'] = theme('multi_taxonomyblock', $item);
          }
        }
      }
      if ($delta == 1) {
        $block['subject'] = db_result(db_query("SELECT block_title FROM {tb_added_list} WHERE tb_id = 1"));
        $block['content'] = theme('forum_taxonomyblock', 1);
      }
  }
  //end switch $op
  return $block;
}

function theme_multi_taxonomyblock($tb_id = 0) {
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $nid = arg(1);
    $nodeuid = db_result(db_query("SELECT uid FROM {node} WHERE nid = %d", $nid));
    $nodetype = db_result(db_query("SELECT type FROM {node} WHERE nid = %d", $nid));
  }
  global $user;
  if ($user->uid) {
    $useruid = $user->uid;
  }
  $ismodified = db_result(db_query("SELECT custom FROM {tb_added_list} WHERE tb_id = %d", $tb_id));
  if ($ismodified == 0) {
    if ($tb_id != 1) {
      $result = db_query("SELECT vid FROM {vocabulary} WHERE name <> 'Forums' ");
      $nodecounter = 'all';
    }
    if ($tb_id == 1) {
      $result = db_query("SELECT vid FROM {vocabulary} WHERE name = 'Forums' ");
      $nodecounter = 'forum';
    }
    
  }
  if ($ismodified == 1) {
    $result = db_query("SELECT vid FROM {tb_customized} WHERE tb_id = %d AND enabled = 1 ORDER BY weight ASC", $tb_id);
    $omit = db_result(db_query("SELECT omit_tids FROM {tb_added_list} WHERE tb_id = %d", $tb_id));
    
    if (!empty($omit)) {
      $omit = explode(',', $omit);
    }
    else {
      $omit = array();
    }
    $open = db_result(db_query("SELECT open_tids FROM {tb_added_list} WHERE tb_id = %d", $tb_id));
    $open = explode(',', $open);
  }
  while ($vocabs = db_fetch_object($result)) {
    $pre_vocab_list[] = $vocabs->vid;
  }
  if (!empty($pre_vocab_list)) { 
    foreach ($pre_vocab_list as $vid) {
      $hasterms = db_result(db_query("SELECT tid FROM {term_data} WHERE vid = %d", $vid));
      if (!empty($hasterms)) {
        $toplevel = taxonomy_get_toplevel($vid);
        $nodecounter = db_result(db_query("SELECT counter FROM {tb_customized} WHERE tb_id = %d AND vid = %d", $tb_id, $vid));
        $has_nodes = array();
        foreach ($toplevel as $tid) {
          $has_nodes[] = term_has_nodes($tid, $nodecounter);
        }
          
      }
      if (!empty($has_nodes)) {
        $vocab_list[] = $vid;
      }
    }
  }
  $output = '';
  if (!empty($vocab_list)) {
    $size = sizeof($vocab_list);
    if ($size > 1) {
      $multiple = TRUE;
    }
    else {
      $multiple = FALSE;
    }
    foreach ($vocab_list as $vid) {
      $toplevel = taxonomy_get_toplevel($vid);
      if ($toplevel != NULL) {

        
        if ($ismodified == 0 && $tb_id != 1) {
          $pathpattern  = 'taxonomy/term/%tid';
          $nodecounter  = 'all';
          $titlepattern = 'Content tagged with @termname';
        }
        if ($ismodified == 0 && $tb_id == 1) {
          $pathpattern  = 'forum/%tid';
          $nodecounter  = 'forum';
          $titlepattern = 'Forums categorized as %tid';
        }
        if ($ismodified == 1) {
          $pathpattern = db_result(db_query("SELECT path_pattern FROM {tb_customized} WHERE tb_id = %d AND vid = %d", $tb_id, $vid));
          $nodecounter = db_result(db_query("SELECT counter FROM {tb_customized} WHERE tb_id = %d AND vid = %d", $tb_id, $vid));
          $titlepattern = db_result(db_query("SELECT title_pattern FROM {tb_customized} WHERE tb_id = %d AND vid = %d", $tb_id, $vid));      
        }
        
        $additional = variable_get('tb_additional', 0);
        $options['pathpattern']  = $pathpattern;
        $options['nodecounter']  = $nodecounter;
        $options['titlepattern'] = $titlepattern;
        $options['omit']         = $omit;
        $options['open']         = $open;
        $options['vid']          = $vid;
        if ($nid) {
          $options['nid']        = $nid;
        }
        $options['vocabname']    = $vocabname;
        if ($useruid) {
          $options['useruid']    = $useruid;
        }
        if ($nodeuid) {
          $options['nodeuid']    = $nodeuid;
        }
         if ($nodetype) {
          $options['nodetype']    = $nodetype;
        }
        if (is_array($additional)) {
          $options['empty']          = $additional[$tb_id][$vid]['empty'];
          $options['children_count'] = $additional[$tb_id][$vid]['children_count'];
        }
        
        $tree = jq_taxonomy_tree_creator($vid, $options);
        $trail = taxonomy_trail_creator($pathpattern);
        $menu = theme('menu_creation_by_array', $tree, $trail);
        if ($multiple == TRUE) {
          if ($ismodified == 0) {
            $vocabname = db_result(db_query("SELECT name FROM {vocabulary} WHERE vid = %d", $vid));
          }
          if ($ismodified != 0) {
            $vocabname = db_result(db_query("SELECT custom_title FROM {tb_customized} WHERE tb_id = %d AND vid = %d", $tb_id, $vid));
          }
         
          if (($vocabname != '<none>') && !empty($menu)) {
            if (function_exists('tt')) {
              $vocabname = tt('taxonomy:vocabulary:'. $vid .':name', $vocabname);
            }
            if (user_access('administer taxonomy')) {
              $path = drupal_get_path('module', 'taxonomyblocks');
              drupal_add_css($path.'/taxonomyblocks.css');
              drupal_add_js($path.'/taxonomyblocks.js');
              $output .= '<h3><span class="vocab_edit_link">'.vocab_edit_link($vid).'</span>'. $vocabname .'</h3>';
            }
            else {
              $output .= '<h3>'. $vocabname .'</h3>';
            }
          }
        }
        $output .= $menu;
      }
    } 
  }
  return $output;
}
function theme_forum_taxonomyblock() {
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $nid = arg(1);
    $nodeuid = db_result(db_query("SELECT uid FROM {node} WHERE nid = %d", $nid));
    $nodetype = db_result(db_query("SELECT type FROM {node} WHERE nid = %d", $nid));
  }
  global $user;
  if ($user->uid) {
    $useruid = $user->uid;
  }
  $ismodified = db_result(db_query("SELECT custom FROM {tb_added_list} WHERE tb_id = 1"));
  if ($ismodified == 0) {
    $pathpattern = 'forum/%tid';
    $nodecounter = 'forum';
    $titlepattern = 'Forums categorized as @termname';
  }
  if ($ismodified == 1) {
    $result = db_query("SELECT * FROM {tb_customized} WHERE tb_id = 1");
    while ($forum = db_fetch_object($result)) {
      $pathpattern  = $forum->path_pattern;
      $titlepattern = $forum->title_pattern;
      $nodecounter  = $forum->counter;
    }
    $omit = db_result(db_query("SELECT omit_tids FROM {tb_added_list} WHERE tb_id = 1"));
    if (!empty($omit)) {
      $omit = explode(',', $omit);
    }
    else {
      $omit = array();
    }
    $open = db_result(db_query("SELECT open_tids FROM {tb_added_list} WHERE tb_id = 1"));
    $open = explode(',', $open);
  }
  
  $forum_vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE name = '%s'", 'Forums'));
  $toplevel = taxonomy_get_toplevel($forum_vid);
  
  $additional = variable_get('tb_additional', 0);
  
  $options['pathpattern']  = $pathpattern;
  $options['nodecounter']  = $nodecounter;
  $options['titlepattern'] = $titlepattern;
  $options['omit']         = $omit;
  $options['open']         = $open;
  $options['vid']          = $vid;
  if ($nid) {
    $options['nid']        = $nid;
  }
  $options['vocabname']    = $vocabname;
  if ($useruid) {
    $options['useruid']    = $useruid;
  }
  if ($nodeuid) {
    $options['nodeuid']    = $nodeuid;
  }
   if ($nodetype) {
    $options['nodetype']    = $nodetype;
  }
  if (is_array($additional)) {
    $options['empty']          = $additional['1'][$forum_vid]['empty'];
    $options['children_count'] = $additional['1'][$forum_vid]['children_count'];
  }
  
  
  if ($toplevel != NULL) {
    $tree  = jq_taxonomy_tree_creator($forum_vid, $options);
    $trail = taxonomy_trail_creator($pathpattern);
    $menu  = theme('menu_creation_by_array', $tree, $trail);
  }
  
  return $menu;
}
/**
 * Checks to see if term has a parent and stops at first result. 
 */
function term_has_parent($tid) {
  $hasparent = db_result(db_query("SELECT parent FROM {term_hierarchy} WHERE tid = %d", $tid));  
  return $hasparent;
}
  
 function taxonomy_get_toplevel($vid) {
  //Check to insure that the vid has terms.
  $result = db_query("SELECT tid FROM {term_data} WHERE vid = %d ORDER BY weight,name ASC", $vid);
  
  while ($term = db_fetch_object($result)) {
    $hasparent = term_has_parent($term->tid);
    if ($hasparent == 0) {
    //Instead of counting here we will put this off till the creation of final array.
      $toplevel_array[] = $term->tid;
    }
  }
  return $toplevel_array;
}
function get_one_level_children($parent_tid) {
  $result = db_query("SELECT th.tid FROM {term_hierarchy} th, {term_data} td WHERE th.parent = %d AND td.tid = th.tid ORDER BY td.weight,td.name ASC", $parent_tid);
  while ($term = db_fetch_object($result)) {
    $children[]   = $term->tid;
  }
  return $children;
}
function get_all_children($parent_tid, $prev = NULL) {
  $level = '';
  $level = get_one_level_children($parent_tid);
  
  if (!empty($level) && $prev != NULL) {
    $children = array_merge($level, $prev);
  }
  if (!empty($level) && $prev == NULL) {
      $children = $level;
  }
  if (empty($level) && $prev != NULL) {
    $children = $prev;
  }
 
  if (!empty($level)) {
    foreach ($level as $ctid) {
      $next = array();
      $next = get_all_children($ctid, $children);
      if (!empty($next)) {
        $children = array_merge($next, $children);
      }
    }
  }
  if (is_array($children)) {
    $children = array_unique($children);
  }
  return $children;
}
/**
 * Checks to see if term has any nodes.
 * Returns a positive integer if true.
 * Returns NULL if False.
 */
function term_has_nodes($tid, $nodecounter = 'all') {
  if ($nodecounter != 'all' && $nodecounter != 'none') {
    $nid = db_result(db_query(db_rewrite_sql("SELECT tn.nid FROM {term_node} tn, {node} n WHERE tn.tid = %d AND n.nid = tn.nid AND n.type = '%s' AND n.status = 1 AND n.vid = tn.vid"), $tid, $nodecounter));
  }
  else {
    $nid = db_result(db_query(db_rewrite_sql("SELECT tn.nid FROM {term_node} tn, {node} n WHERE tn.tid = %d AND n.nid = tn.nid AND n.status = 1 AND n.vid = tn.vid"), $tid));	
  }
  return $nid;
}

function tb_node_counter($tid, $nodecounter = 'all', $ch_count = 0) {
  
  if ($ch_count == 0) {
    if ($nodecounter != 'all') {
      $count = $count = db_result(db_query(db_rewrite_sql("SELECT COUNT(tn.nid) FROM {term_node} tn, {node} n WHERE tn.tid = %d AND n.nid = tn.nid AND n.type = '%s' AND n.status = 1 AND n.vid = tn.vid"), $tid, $nodecounter));
    }
    if ($nodecounter == 'all') {
      $count = $count = db_result(db_query(db_rewrite_sql("SELECT COUNT(tn.nid) FROM {term_node} tn, {node} n WHERE tn.tid = %d AND n.nid = tn.nid AND n.status = 1 AND n.vid = tn.vid"), $tid));
    }
  }
  if ($ch_count == 1) {
    // Get an array of children terms
    $all = get_all_children($tid);
    
    // Add the current tid to the array
    $all[] = $tid;
    
    $nidarray = array();
    foreach ($all as $ctid) {
      // The nodecounter variable is set to get all nodes regardless of content type.
      if ($nodecounter == 'all') {
        $result = db_query(db_rewrite_sql("SELECT tn.nid FROM {term_node} tn, {node} n WHERE tn.tid = %d AND n.nid = tn.nid AND n.status = 1 AND n.vid = tn.vid"), $ctid);
      }
      // The nodecounter variable is set to filter by a content type.
      else {
        $result = db_query(db_rewrite_sql("SELECT tn.nid FROM {term_node} tn, {node} n WHERE tn.tid = %d AND n.nid = tn.nid AND n.type = '%s' AND n.status = 1 AND n.vid = tn.vid"), $ctid, $nodecounter);
      }
      while ($nodes = db_fetch_object($result)) {
        if (!in_array($nodes->nid, $nidarray)) {
          $nidarray[] = $nodes->nid;
        }
      }
    }
    if (!empty($nidarray)) {
      $count = count($nidarray);
    }
    else {
      $count = 0;
    }
    
    
  }
  return $count;
}
/**
 * Returns comma separated string of ancecestor tids (only single hierarchy).
 */
function get_all_ancestor_csv($tid) {
  $parent = '';
  $parent = term_has_parent($tid);
  if ($parent != '0') {
    $string .= $parent;
    $nextlevel = '';
    $nextlevel = get_all_ancestor_csv($parent);
    if (!empty($nextlevel)) {
      $string .= ','. $nextlevel;
    }
  }
  return $string;
}

function taxonomy_trail_creator($pathpattern) {
  $pattern_array  = explode('/', $pathpattern);
  $p = 0;
  foreach ($pattern_array as $chunk) {
    if ($chunk != '%tid') {
      $p++;
    }
  }
  $pagetid = "";
  $pagetid = arg($p);
  $ancestors  = get_all_ancestor_csv($pagetid);
  $ancestors = explode(',', $ancestors);
  foreach ($ancestors as $tid) {
    $term = str_replace('%tid', $tid, $pathpattern);
    $url_array[] = $term;
  }
  return $url_array;
}

function taxonomy_recursive_array_builder($tid_array, $options) {
  if (!empty($options)) {
    $pathpattern   = $options['pathpattern'];
    $nodecounter   = !empty($options['nodecounter']) ? $options['nodecounter'] : 'all';
    $ch_count      = !empty($options['children_count']) ? $options['children_count'] : 0;
    $empty         = !empty($options['empty']) ? $options['empty'] : 0;
    $titlepattern  = !empty($options['titlepattern']) ? $options['titlepattern'] : NULL;
    $omit          = !empty($options['omit']) ? $options['omit'] : NULL;
    $open          = !empty($options['open']) ? $options['open'] : NULL;
    $vid           = !empty($options['vid']) ? $options['vid'] : NULL;
    $nid           = !empty($options['nid']) ? $options['nid'] : NULL;
    $vocabname     = !empty($options['vocabname']) ? $options['vocabname'] : NULL;
    $useruid       = !empty($options['useruid']) ? $options['useruid'] : NULL;
    $nodeuid       = !empty($options['nodeuid']) ? $options['nodeuid'] : NULL;
    $nodetype      = !empty($options['nodetype']) ? $options['nodetype'] : NULL;
  }
  foreach ($tid_array as $tid) {
    
    $termname =  db_result(db_query("SELECT name FROM {term_data} WHERE tid = %d", $tid));
    if (function_exists('tt')) {
      $termname = tt('taxonomy:term:'. $tid .':name', $termname);
    }
    $tree[$termname]['link']['tid'] = $tid;
    $tree[$termname]['link']['path_pattern'] = $pathpattern;
    $tree[$termname]['link']['editaccess'] = 'administer taxonomy';
    $tree[$termname]['link']['editpath'] = 'admin/content/taxonomy/edit/term/'.$tid;
    $tree[$termname]['link']['edit_text'] = t('Edit this term');
    $hasnodes = '';
    $hasnodes = term_has_nodes($tid, $nodecounter);
    
    $count = '';
    
    $path  = str_replace('%tid', $tid, $pathpattern);
    $path  = str_replace('%termname', $termname, $path);
    if ($nid) {
      $path  = str_replace('%nid', $nid, $path);
      $path  = str_replace('%nodeuid', $nodeuid, $path);
      $path  = str_replace('%nodetype', $nodetype, $path);
    }
    $path  = str_replace('%vid', $vid, $path);
    if (!empty($useruid)) {
      $path  = str_replace('%useruid', $useruid, $path);
    }
    $path  = str_replace('%vocabname', $vocabname, $path);

    $sp = "/(?<=%arg\()\d(?=\))/";
    preg_match($sp, $path, $matches);
    if (!empty($matches)) {
      foreach ($matches as $match) {
        $arg = '';
        $arg = arg($match);
        $path = str_replace('%arg('.$match.')', $arg, $path);
      }
    }

    if ($nodecounter == 'none') {
      $tree[$termname]['link']['title'] = $termname ;
    }
    if ($nodecounter != 'none') {
      $count = tb_node_counter($tid, $nodecounter, $ch_count);
      $tree[$termname]['link']['title'] = $termname .' ('. $count .')';
    }
    
   
    $allchildren = get_all_children($tid);
    $child_with_node_array = array();
    if (!empty($allchildren)) {
      $child_has_node = array();
      foreach ($allchildren as $ctid) {
        $childnode = term_has_nodes($ctid, $nodecounter);
        if ($childnode != FALSE) {
          $child_has_node[] = $childnode;
        }         
        if (!empty($omit)) {
          $child_is_omited = in_array($ctid, $omit);
        }
        else {
          $child_is_omited = FALSE;
        }
        
        $child_with_node_array = array();
        if (!empty($child_has_node) && $child_is_omited == FALSE) {
          $child_with_node_array[] = $ctid;
        }
      }
    }
    $omited = FALSE;    
    if ($empty == 0) {
      if (empty($hasnodes)) {
        $omited = TRUE;
      }
      if (empty($omit) && !empty($hasnodes)) {
        $omited = FALSE;
      }
    }

    if ($empty == 1) {
      if ((empty($hasnodes) && empty($child_with_node_array))) {
        $omited = TRUE;
      }
      if (!empty($hasnodes) || !empty($child_with_node_array)) {
        $omited = FALSE;  
      }
    }
    if (!empty($omit)) {
      if (in_array($tid, $omit)) {
        $omited = TRUE;
      }
    }
    if ($omited == TRUE) {
      $tree[$termname]['link']['hidden'] = '1';
    }
    else {
      $tree[$termname]['link']['hidden'] = '0';
    }
    $tree[$termname]['link']['href'] = $path;
   
   
    
    if (empty($titlepattern)) {
      $tree[$termname]['link']['options']['attributes']['title'] = t('Content tagged with @termname', array('@termname' => $termname));
    }
    else {
      $tree[$termname]['link']['options']['attributes']['title'] = t($titlepattern, array('@termname' => $termname));
    }
    $children = array();
    $tree[$termname]['below'] = array();
    $children = get_one_level_children($tid);
    
    
   
    if (!empty($child_with_node_array)) {
        $tree[$termname]['link']['has_children'] = '1';
        
        if (!empty($open)) {
          if (in_array($tid, $open)) {
            $tree[$termname]['link']['expanded'] = 1;
          }
        }
      }
     
      else {
        $tree[$termname]['link']['has_children'] = '0';
      }
    if (!empty($children)) {
      $subarray = taxonomy_recursive_array_builder($children, $options);
      $tree[$termname]['below'] = array_merge($tree[$termname]['below'], $subarray);
    }
    if (empty($children)) {
      $tree[$termname]['below'] = FALSE;
      $tree[$termname]['link']['has_children'] = '0';
    }
     
  }
 
  return $tree;
}
function jq_taxonomy_tree_creator($vid, $options) {
  $tree = array();
  $toplevel = taxonomy_get_toplevel($vid);
  if ($toplevel != NULL) {
    $tree = taxonomy_recursive_array_builder($toplevel, $options);
  }
  return $tree;
}

function taxonomyblocks_theme() {
  return array(
    'multi_taxonomyblock' => array(
      'arguments' => array(
        'tb_id' => NULL,
      ),
    ),
    'taxonomy_blocks_config_list' => array(
      'arguments' => array(
        'form' => NULL,
      ),
    ),
    'forum_taxonomyblock' => array(),
  );
}

/**
 * Implementation of hook_help().
 */

function taxonomyblocks_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/taxonomyblocks/configure' :
      return t('These settings will only affect the display of vocabs in this particular block. Please note that while the path pattern gives you control over the href of the links, it is up to you to insure that there is a view or a menu callback in place to catch them. Also note that while the node count options allow you to specify which content types will be counted up this does not mean that the page will be automatically adjusted to only show this content type. You must control this from within the view that you create. If you don\'t know what any of this means, then you should probably just leave the defaults in place for the path pattern. By default blocks containing multiple taxonomies will have either the title of the vocab or the custom title of your choosing. If you wish to display multiple vocabs with no titles over individual vocabs you can enter &lt;none&gt; for the custom title field.');
  }
}
/**
 * Implementation of hook_taxonomy().
 */
function taxonomyblocks_taxonomy($op, $type, $array = NULL) {
  if ($type == 'vocabulary' && $op == 'delete') {
    db_query("DELETE FROM {tb_customized} WHERE vid = %d", (int)$array['vid']);
  }
}
function vocab_edit_link($vid) {
  $output = l(t('Rearrange Terms'), 'admin/content/taxonomy/'.$vid) .' | '. l(t('Edit Vocabulary'), 'admin/content/taxonomy/edit/vocabulary/'.$vid ); 
  return $output;
}
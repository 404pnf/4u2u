<?php

//$Id: uc_userpoints_payment.module,v 1.6.2.2 2009/05/14 04:18:27 smokris Exp $

define('USERPOINTS_UC_PAYMENT',   'userpoints_ubercart_payment');
define('USERPOINTS_DISPLAY',	    'userpoints_display');
define('USERPOINTS_PAY_MODERATE',	'userpoints_pay_moderate');
define('USERPOINTS_PAY_CATEGORY',	'userpoints_pay_category');

function uc_userpoints_payment_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      $output = t('<strong>Userpoints Payment:</strong> Interfaces userpoints with Ubercart so users can make purchases with points.');
      break;
  }
  return $output;
}

/**
 * Implementation of hook_userpoints api().
 */

function uc_userpoints_payment_userpoints($op, $points = 0, $uid = 0, $event = '') {
  switch($op) {
    case 'setting':
      if (module_exists('uc_cart') && module_exists('uc_payment')) {
        $group = 'uc_userpoints_payment';
        $form[$group] = array(
          '#type' => 'fieldset',
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
          '#title' => t('Ubercart Payment Options'),
        );
        $form[$group][USERPOINTS_UC_PAYMENT] = array(
          '#type' => 'textfield',
          '#title' => t('!Points used in payment (for every dollar)', userpoints_translation()),
          '#default_value' => variable_get(USERPOINTS_UC_PAYMENT, 1),
          '#size' => 5,
          '#maxlength' => 5,
        );
        $form[$group][USERPOINTS_DISPLAY] = array(
          '#type' => 'select',
          '#title' => t('Display Dollars, !Points, or both.', userpoints_translation()),
          '#default_value' =>  variable_get(USERPOINTS_DISPLAY,2),
          '#options' => array(1 => t('Dollars'), 2 => t('Both'), 3 => t('Points')),
        );
        $form[$group][USERPOINTS_PAY_MODERATE] = array(
          '#type' => 'radios',
          '#title' => t('Moderate userpoints transaction'),
          '#default_value' => variable_get(USERPOINTS_PAY_MODERATE, 0),
					'#options' => array(t('No'), t('Yes')),
        );
		$form[$group][USERPOINTS_PAY_CATEGORY] = array(
		  '#type' => 'select',
		  '#title' => t('Payment Category'),
		  '#default_value' => variable_get(USERPOINTS_PAY_CATEGORY, NULL),
		  '#options' => userpoints_get_categories(),
		  '#description' => t('Category to assign awarded !points.', userpoints_translation()),
		);
      }
      return $form;
      break;
  }
}

/**
 * Implementation of hook_noedapi().
 */

function uc_userpoints_payment_nodeapi(&$node, $op, $arg3, $arg4) {
  switch ($op){
    case 'view':
		if ($node->type=='product') {
			$dispStyle = variable_get(USERPOINTS_DISPLAY,2);
			//disp 1=dollars, 2=both, 3=points

			if (module_exists('uc_userpoints_product')) {
			  $points = db_result(db_query("SELECT points FROM {uc_userpoints_products} WHERE nid = %d", $node->nid));
			  if ($points > 0) {
			    $dispStyle = 1; // you can't buy a point product with points
			  }
			}
	
			$pointExchange = intval(variable_get(USERPOINTS_UC_PAYMENT, 1));
			$pointCost = intval(round($node->sell_price) * $pointExchange);
			switch($dispStyle) {
				case 1: 
					//do nothing since we only want dollars
					//$node->content['sell_price']['#value'] = '$$';
					//$node->content['display_price']['#value'] = '$$';
					break;
				case 2: 
					$node->content['sell_price']['#value'] .= '<div class="sell_price">' . t('!Points: ' . $pointCost, userpoints_translation()) . '</div>';
					$node->content['display_price']['#value'] .= '<div class="display_price">' . t('!Points: ' . $pointCost, userpoints_translation()) . '</div>';
					break;
				case 3: 
					$node->content['sell_price']['#value'] = '<div class="sell_price">' . t('!Points: ' . $pointCost, userpoints_translation()) . '</div>';
					$node->content['display_price']['#value'] = '<div class="display_price">' . t('!Points: ' . $pointCost, userpoints_translation()) . '</div>';
					break;
			}
			
		}
	}
}

/**
 * Implementation of hook_payment_method().
 */
 
function uc_userpoints_payment_payment_method() {
  global $user;
  $curUserId = $user->uid;

  //how many points does this user have?
 // $curUserPoints = userpoints_get_current_points($uid = $curUserId, $tid = variable_get(USERPOINTS_PAY_CATEGORY, NULL));

  $curUserPoints = userpoints_get_current_points($uid = $curUserId,'all');

  $maxdisc = $curUserPoints / intval(variable_get(USERPOINTS_UC_PAYMENT, 1));

  // make sure they have points in the first place
  if ($curUserPoints > 0 || request_uri() != '/cart/checkout') {
    $methods[]	= array(
      'id'	=> 'points',
      'name'	=> t('!Points', userpoints_translation()),
      'title'	=> t('!Points (Total available via !Points: ' . uc_currency_format($maxdisc) . ')', userpoints_translation()),
      'desc'	=> t('Pay by !Points.', userpoints_translation()),
      'callback'=> 'uc_payment_method_points',
      'weight'	=> 4,
      'checkout'=> TRUE,
      'backend'	=> TRUE,
    );

    return $methods;
  }
}

/**
 * Implementation of hook_order().
 */
 
function uc_userpoints_payment_order($op, &$arg1, $arg2) {
  $order 	 = $arg1;
  $paymethod = strtolower($order->payment_method);
  switch ($op) {
		case 'submit':
			// fires when the order is submitted and adds/subtracts thier points
			if ($paymethod == 'points') {
				uc_userpoints_payment_payment($order);
			}
			break;
		case 'update':
			// if the order is canceled we need to refund thier points because we are too lazy to do it by hand...
			if ($arg2 == 'canceled') {
				if (strtolower($order->payment_method) == 'points') {
					uc_userpoints_payment_refund($order);
				}
			}
			break;
		case 'delete':	
		  if (strtolower($order->payment_method) == 'points') {
			uc_userpoints_payment_refund($order);
	  	  }
		  break;
		case 'can_delete';
		  return FALSE;
	  	break;
	  }
}

/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/

function uc_payment_method_points($op, &$arg1) {
  global $user;
  $curUserId	 = $user->uid;
 //  $curUserPoints = intval(userpoints_get_current_points($uid = $curUserId, $tid = variable_get(USERPOINTS_PAY_CATEGORY, NULL)));

   $curUserPoints = intval(userpoints_get_current_points($uid = $curUserId,'all'));

  $pointExchange = intval(variable_get(USERPOINTS_UC_PAYMENT, 1));

  switch ($op) {
		case 'cart-details':
			/**
			 *  Eventually I want to hide the points discount if its enabled.
			 **/
			return;
			break;
		case 'cart-process':
			//this would be verification that should be covered else where if possible
			// check thier points and make sure they have enough to pay for this purchase
			//order information
			$order_id 	  = $arg1->order_id;
			
			$items = uc_cart_get_contents();
			foreach ($items as $cartitem) {
			  $cartbalance += $cartitem->price*$cartitem->qty;
			}
			$shipresult		= db_query("select amount from {uc_order_line_items} where `type`='shipping'and  order_id = %d", $order_id);
			$shipitem 	  = db_fetch_array($shipresult);
			$orderTotal   = $shipitem['amount']+$cartbalance;
			$pointsNeeded = intval((round($orderTotal) * $pointExchange));

			if (($curUserPoints < $pointsNeeded && $curUserId != 0)) {
				drupal_set_message('You do not have enough points to complete this purchase.  You have ' . $curUserPoints . ' but you need ' . $pointsNeeded . '.  Please select another payment method.', 'error');
				return FALSE;
				break;
			}
			else
			{
				return TRUE;
				break;
			}
			break;
		case 'settings':
			// Add a few points related fields to the payment methods settings form.
			$form['userpoints_ubercart_permission'] = array(
				'#value' => '<div>'. t('Please adjust the settings for using points under the userpoints section '.l('userpoints admin settings','admin/settings/userpoints').'.  This area is for enabling points as payment method only.') .'</div>',
		);
			return $form;
			break;
  }
}

function uc_userpoints_payment_payment($order) {
  global $user;
  $curUserId	= $user->uid;
  $pointExch	= intval(variable_get(USERPOINTS_UC_PAYMENT, 1));
  $orderTotal	= $order->order_total;
  $points		= intval(((round($orderTotal) * $pointExch) * (-1)));
  $description	= 'User made a purchase and paid with points (Ubercart Order ' . $order->order_id . ')';

  if ($order === FALSE || uc_order_status_data($order->order_status, 'state') != 'in_checkout') {
		print t('An error has occurred during payment.  Please contact us to ensure your order has submitted.');
		exit();
  }

  if ($order->payment_method == 'points') {  
		$params = array (
			'tid' => variable_get(USERPOINTS_PAY_CATEGORY, NULL),
			'uid' => $curUserId,
			'points' => $points,
			'operation' => 'delete',
			'description' => $description,
			'entity_id' => $order->order_id,
			'entity_type' => 'Ubercart Payment',
			'moderate' => variable_get(USERPOINTS_PAY_MODERATE, 0),
		);
		userpoints_userpointsapi($params);
		uc_payment_enter($order->order_id, 'points', $orderTotal, $curUserId, NULL, $description);
		db_query("insert into {uc_up_payment_log} (uid, oid, points) values(%d, %d, %d)",$curUserId, $order->order_id, $points);
		uc_order_update_status($order->order_id, 'payment_received');
  }
}

function uc_userpoints_payment_refund($order) {
  global $user;
  $curUserId	= $user->uid;
  $oid 			= $order->order_id;
  $result 		= db_query("select uplog_id, points from {uc_up_payment_log} where oid = %d and uid = %d", $oid, $curUserId);
  $orderTotal	= $order->order_total;
  
  if ($result != FALSE) {
    $pointinfo = db_fetch_object($result);
    $points = intval((($pointinfo->points) * (-1)));
		$description	= 'User purchase (Ubercart Order ' . $order->order_id .') has been canceled.';
	
		db_query("delete from {uc_payment_receipts} where method = 'Points' and order_id = %d", $oid);
		db_query("delete from {uc_up_payment_log} where uplog_id = %d", $pointinfo->uplog_id);
		
		$params = array (
			'tid' => variable_get('USERPOINTS_PAY_CATEGORY', NULL),
			'uid' => $curUserId,
			'points' => $points,
			'operation' => 'insert',
			'description' => $description,
			'entity_id' => $oid,
			'entity_type' => 'Ubercart Refund',
			'moderate' => variable_get(USERPOINTS_PAY_MODERATE, 0),
		);
		userpoints_userpointsapi($params);
  }
}

<?php
// $Id: sina_open.module,v 1.5 2011/02/11 03:52:44 eastcn Exp $
include_once( 'config.php' );
include_once( 'weibooauth.php' );
/*
$o = new WeiboOAuth( WB_AKEY , WB_SKEY  );

$keys = $o->getRequestToken();

$url = $o->getAuthorizeURL( $keys['oauth_token'] ,false , 'http://t.2u4u.com.cn');

$_SESSION['keys'] = $keys;

$o = new WeiboOAuth( WB_AKEY , WB_SKEY , $_SESSION['keys']['oauth_token'] , $_SESSION['keys']['oauth_token_secret']  );

$last_key = $o->getAccessToken(  $_GET['oauth_verifier'] ) ;

$_SESSION['last_key'] = $last_key;
*/
/*global $user;
$keys1 = sina_open_get_access_token($user->uid);
$o = new WeiboOAuth( WB_AKEY , WB_SKEY  );
$keys = $o->getRequestToken();
//'oauth_token' => 'fc438ac1bdc6afea620fa25fa58eaa3f', 'oauth_token_secret' => '395f1781dc1bf8da8d960df7f6c77088',
$_SESSION['keys']['oauth_token'] = $keys1->key;
$_SESSION['keys']['oauth_token_secret'] = $keys1->secret;
$_SESSION['verifier'] = $keys1->verifier;
$o = new WeiboOAuth( WB_AKEY , WB_SKEY , $_SESSION['keys']['oauth_token'] , $_SESSION['keys']['oauth_token_secret']  );
$last_key = $o->getAccessToken( $_SESSION['verifier'] ) ;
$_SESSION['last_key'] = $last_key;
*/
//echo '<br><br>session:<br>'.var_export($_SESSION,true).'123<br><br>'.$url.'123<br><br>get:'.var_export($_GET,true).' <br><br>request:'.var_export($_REQUEST);

/**
 * @file
 * 实现新浪微博开放平台部分功能
 */

/**
 * Implementation of hook_menu.
 */
function sina_open_menu() {
  
  $items['sina_open/t_login'] = array(
    'description' => '新浪微博登录或绑定',
    'page callback' => 'sina_open_page_t_login',
    'access callback' => 'sina_open_is_access',
    'type' => MENU_CALLBACK,
    'file' => 'sina_open.pages.inc',
  );
  
  $items['user/%user/sina_open/config'] = array(
    'title' => '新浪微博设置',
    'page callback' => 'sina_open_page_config',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'sina_open.pages.inc',
  );
  $items['user/%user/sina_open/remove'] = array(
    'title' => '新浪微博解除绑定',
    'page callback' => 'sina_open_page_config',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sina_open_remove_confirm', 1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'sina_open.pages.inc',
  );
  $items['admin/settings/sina_open'] = array(
    'title' => '新浪微博',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sina_open_admin_settings'),
    'access arguments' => array('administer sina open'),
    'file' => 'sina_open.admin.inc',
  );
  $items['admin/settings/sina_open/users'] = array(
    'title' => '微博用户',
    'page callback' => 'sina_open_admin_users',
    'access arguments' => array('administer sina open'),
    'file' => 'sina_open.admin.inc',
  );
   $items['create/%'] = array(
    'description' => '加悠粉',
    'page callback' => 'sina_open_guanzhu',
    'page arguments' => array(1),
    'access callback' => 'sina_open_is_access',
    'type' => MENU_CALLBACK,
    'file' => 'sina_open.pages.inc',
  );
  
  return $items;
}

/**
 * @Implement of hook_perm()
 */
function sina_open_perm() {
  return array('administer sina open');
}

/**
 * 使用新浪微博登录或绑定帐号的权限
 */
function sina_open_is_access() {
  global $user;
  return $user->uid > 0 || variable_get('sina_open_is_login', 1);
}

/**
 * Implementation of hook_form_alter
 */
function sina_open_form_alter(&$form, $form_state, $form_id) {
  if (variable_get('sina_open_is_login', 1) && ($form_id == 'user_login_block' || $form_id == 'user_login')) {
    
    $form['sina_open_links'] = array(
      '#value' => theme('item_list', array(array(
        'data' => l('使用新浪微博登录', 'sina_open/t_login'),
        'class' => 'sina_open_login_links'
      ))),
      '#weight' => 1,
    );
    
  }
  
  global $user;
  $sina_open = false;
  
  if ('comment_form' == $form_id) {
    if (variable_get('sina_open_comment', 1)) {
      if ($user->uid > 0) { 
        $sina_open = true;
      } else {
        
        if (variable_get('comment_form_location_'. $node->type, COMMENT_FORM_SEPARATE_PAGE) == COMMENT_FORM_SEPARATE_PAGE) {
          $destination = 'redirect='. rawurlencode('comment/reply/'.$form['nid']['#value']);
        } else {
          $destination = 'redirect='. rawurlencode('node/'.$form['nid']['#value']);
        }
        
        $form['sina_open_links'] = array(
          '#value' => theme('item_list', array(array(
            'data' => l('使用新浪微博登录', 'sina_open/t_login', array('query' => $destination)),
            'class' => 'sina_open_login_links'
          ))),
          '#weight' => -2,
        );
      }
    }
  }else if (isset($form['#node']) && $form['#node']->type .'_node_form' == $form_id
  && variable_get('sina_open_node_'.$form['#node']->type, 1) && !$form['#node']->nid) {
    $sina_open = true;
  }
  
  if ($sina_open) {
    $form['sina_open'] = array(
      '#type' => 'fieldset',
      '#title' => '发送到新浪微博',
      '#collapsible' => true,
      '#collapsed' => true,
      '#tree' => true
    );
    $form['sina_open']['check'] = array(
      '#type' => 'radios',
      '#title' => '发送',
      '#required' => true,
      '#default_value' => 1,
      '#options' => array('否', '是'),
    );
    $form['sina_open']['title'] = array(
      '#type' => 'textfield',
      '#title' => '内容',
      '#description' => '访问 url 将附加在内容后面，总字数不大于 140，留空将使用标题。需要先绑定微博帐号才能使用此功能。',
    );
  }
  return $form;
}

/**
 * @Implement of hook_nodeapi()
 */
function sina_open_nodeapi(&$node, $op) {
  if ($op == 'insert' && variable_get('sina_open_node_'.$node->type, 1) && $node->sina_open) {
    global $user;
    
    if($node->sina_open['check']) {
      if (db_result(db_query('SELECT uid FROM {sina_open_user} WHERE uid = %d', $user->uid))) {
        $url = url('node/'.$node->nid, array('absolute' => true));
        
        sina_open_t_set_tweet(
         '＃'.外语微阅读.'＃【'.$node->title.'】'.$node->sina_open['title'] ,
          url('node/'.$node->nid, array('absolute' => true))
        );
      } else {
        drupal_set_message('您需要先绑定新浪微博帐号，才能够推送信息。', 'error');
      }
    }

  }
}

/**
 * @Implement of hook_comment()
 */
function sina_open_comment(&$comment, $op) {
	
  if ($op == 'insert' && isset($comment['sina_open']) && variable_get('sina_open_comment', 1)) {
  	$node = node_load($comment['nid']);
  	
    if($comment['sina_open']['check']) {
      sina_open_t_set_pic_tweet(
          
        '＃'.外语微阅读.'＃【'.$node->title.'】'.$comment['subject'], '106250001.jpg' ,
       url('node/'.$comment['nid'], array('absolute' => true))
      );
    }
   
   /* if($comment['sina_open']['check']) {
      sina_open_t_set_tweet(
          
         '＃'.外语微阅读.'＃【'.$node->title.'】'.$comment['subject'],
        url('node/'.$comment['nid'], array('absolute' => true))
      );
    }
     */
  }
}

/**
 * @Implement of hook_user()
 */
function sina_open_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'load': // case 'login':
      $result = db_query('SELECT * FROM {sina_open_user} WHERE uid = %d', $account->uid);
      if ($o = db_fetch_object($result)) {
        if ($o->token) {
          $o->token = unserialize($o->token);
        }
        
        if (empty($o->sina_uid)) {
          sina_open_is_token(true);
        }
        
        $account->sina_open_t = $o;
      }
    break;
    case 'delete':
      db_query('DELETE FROM {sina_open_user} WHERE uid = %d', $account->uid);
    
  }
}

/**
 * 编码数据
 * @param (string or array) $input
 */
function sina_open_urlencode_rfc3986($input) { 
  if (is_array($input)) { 
      return array_map('sina_open_urlencode_rfc3986', $input); 
  } else if (is_scalar($input)) { 
    return str_replace( '+', ' ',  str_replace('%7E', '~', rawurlencode($input))); 
  } else { 
    return ''; 
  } 
}

/**
 * GET query 字符串解析为数组
 * @param (string) $string
 */
function sina_open_parse_parameters($string) { 
  if (!isset($string) || !$string) return array(); 

  $pairs = explode('&', $string); 

  $param = array(); 
  foreach ($pairs as $pair) { 
    $split = explode('=', $pair, 2); 
    $parameter = urldecode($split[0]); 
    $value = isset($split[1]) ? urldecode($split[1]) : ''; 

    if (isset($param[$parameter])) { 
      if (is_scalar($param[$parameter])) { 
        $param[$parameter] = array($param[$parameter]); 
      } 
      $param[$parameter][] = $value; 
    } else { 
      $param[$parameter] = $value; 
    } 
  } 
  return $param; 
}

/**
 * 获取用户访问令牌
 * @param (int) $uid
 */
function sina_open_get_access_token($uid = 0) {
  static $datas;
  
  if (!isset($datas) || !isset($datas[$uid])) {
    if ($uid > 0) {
      if ($o = db_fetch_object(db_query('SELECT uid, token FROM {sina_open_user} WHERE uid = %d', $uid))) {
        if ($o->token) {
          $datas[$uid] = unserialize($o->token);
        } else {
          drupal_set_message('您的新浪微博授权已经过期，请'.l('点击这儿', 'sina_open/t_login').'重新授权');
        }
      }
    } else {
      $datas[$uid] = false;
    }
  }
  
  return $datas[$uid];
}

/**
 * 创建 http 请求
 * @param (array) $params
 */
function sina_open_t_get_request(array $params) {
  $request = new stdClass;
  if (!$consumer_key = variable_get('sina_open_oauth_consumer_key', false)) {
    $consumer_key = 401055340;
  } else {
    $consumer_secret = variable_get('sina_open_oauth_consumer_secret', false);
  }
  
  // 默认参数
  $defaults = array( 
  	"source" =>  $consumer_key, // app key
    'oauth_version' => '1.0', // 版本
    'oauth_nonce' => md5(mt_rand(). $_SERVER['REQUEST_TIME']), // 随机数
    'oauth_timestamp' => time(), // 发起请求的时间戳
    'oauth_consumer_key' => $consumer_key, // app key
    'oauth_consumer_secret' => $consumer_secret, // app 密钥
    'oauth_signature_method' => 'HMAC-SHA1', // 签名方式
  );
  
  // 合并
  $params = array_merge($defaults, $params);
  
  if (isset($params['oauth_consumer_key'])) {
    $request->consumer->key = $params['oauth_consumer_key'];
  } else {
    //$params['oauth_consumer_key'] = $request->consumer->key = 401055340;
    drupal_set_message('必须提供 sina app key', 'error');
    return false;
  }
  
  if (isset($params['oauth_consumer_secret']) && $params['oauth_consumer_secret']) {
    $request->consumer->secret = $params['oauth_consumer_secret'];
    unset($params['oauth_consumer_secret']);
  } else {
    $request->consumer->secret = NULL;
  }
  
  // 访问令牌
  $request->token = NULL;
  if (isset($params['oauth_access_token_key'])) {
    $request->token->key = $params['oauth_access_token_key'];
    unset($params['oauth_access_token_key']);
  }
  
  if (isset($params['oauth_access_token_secret'])) {
    $request->token->secret = $params['oauth_access_token_secret'];
    unset($params['oauth_access_token_secret']);
  }
  
  if (!$request->token && $GLOBALS['user']->uid > 0) {
    $request->token = sina_open_get_access_token($GLOBALS['user']->uid);
  }
  
  if ($request->token->key && !isset($params['oauth_token'])) {
    $params['oauth_token'] = $request->token->key;
  }
  
  if (isset($params['http_method'])) {
    $request->http_method = $params['http_method'];
    unset($params['http_method']);
  } else {
    $request->http_method = 'POST';
  }
  
  if (isset($params['http_url'])) {
    $request->http_url = $params['http_url'];
    unset($params['http_url']);
  } else {
    return false;
  }
  
  // 参数中不允许包含签名
  if (isset($params['oauth_signature'])) {
    unset($params['oauth_signature']);
  }
  
  $keys = sina_open_urlencode_rfc3986(array_keys($params));
  $values = sina_open_urlencode_rfc3986(array_values($params));
  $params = array_combine($keys, $values);
  
  uksort($params, 'strcmp');

  $pairs = $urls = array();
  
  foreach ($params as $key => $value ) {
    if (is_array($value)) {
      natsort($value);
      
      foreach ($value as $v2) {
        $pairs[] = $key . '=' . $v2;
        $urls[] = $key . '[]=' . $v2;
      }
    } else {
      $pairs[] = $key . '=' . $value;
      $urls[] = $key . '=' . $value;
    }
  }
  
  $parts = array($request->http_method, $request->http_url, implode('&', $pairs));
  
  // 待签名基本字符串
  $request->base_string = implode('&', sina_open_urlencode_rfc3986($parts));
  
  if ($request->consumer->secret) {
  
    $key_parts = array(
      $request->consumer->secret,
      $request->token ? $request->token->secret : ""
    );
    
    $key_parts = sina_open_urlencode_rfc3986($key_parts);
    $key = implode('&', $key_parts);
    
    $request->sign = base64_encode(hash_hmac('sha1', $request->base_string, $key, true));
    
  } else {
    $request->sign = sina_open_http_get_sign(
      $request->consumer->key,
      $request->base_string,
      ($request->token ? $request->token->secret : "")
    );
  }
  
  
  if (!$request->sign) {
    drupal_set_message('无法取得签名', 'error');
    return false;
  }
  
  $urls[] = 'oauth_signature='.sina_open_urlencode_rfc3986($request->sign);
  
  $request->to_data = implode('&', $urls);
  
  return $request;
}


/**
 * 执行一个 http 请求
 * $pic 专为图片上传调用（图片内容不需要签名）
 */
function sina_open_t_set_pic_request($http_url, array $values = array(), array $pic = array(), array $headers = array(), $method = 'POST') {
  if (!isset($headers['User-Agent'])) {
    $headers['User-Agent'] = 'Sae T OAuth v0.2.0-beta2';
  }
  
  if (!isset($headers['Content-Type'])) {
    $headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';
  }
  
  
  
  $values['http_url'] = $http_url;
  $values['http_method'] = $method;
  
  if (!$request = sina_open_t_get_pic_request($values, $pic)) {
    return false;
  }
  
  if (!isset($headers['Authorization'])) {
    $headers['Authorization'] = $request->header['Authorization'];
  }
  echo '<br><br>sina_open_t_set_pic_request::request::::'.var_export($request,true).'<br><br>request->http_url:::'.var_export($request->http_url,true).'<br><br>headers:::'.var_export($headers,true).'<br><br>method:::'.var_export($method,true).'<br><br>request->to_data:::'.var_export($request->to_data,true).'<br><br>';
  
  return drupal_http_request($request->http_url, $headers, $method, $request->to_data);
  
  
}

/**
 * 创建 http 请求
 * @param (array) $params
 * @unsignature_params $unsignature_params 专为图片上传调用（图片内容不需要签名）
 */
function sina_open_t_get_pic_request(array $params,array $unsignature_params = array()) {
  $request = new stdClass;
  if (!$consumer_key = variable_get('sina_open_oauth_consumer_key', false)) {
    $consumer_key = 401055340;
  } else {
    $consumer_secret = variable_get('sina_open_oauth_consumer_secret', false);
  }
  
  $oauth_nonce = md5(mt_rand(). $_SERVER['REQUEST_TIME']);
  $oauth_timestamp = time();
  
  // 默认参数
  $defaults = array( 
  	//"source" =>  $consumer_key, // app key
    'oauth_version' => '1.0', // 版本
    'oauth_nonce' => $oauth_nonce, // 随机数
    'oauth_timestamp' =>  $oauth_timestamp, // 发起请求的时间戳
    'oauth_consumer_key' => $consumer_key, // app key
    'oauth_consumer_secret' => $consumer_secret, // app 密钥
    'oauth_signature_method' => 'HMAC-SHA1', // 签名方式
  );
 
  // 合并
  $params = array_merge($defaults, $params);
  
  if (isset($params['oauth_consumer_key'])) {
    $request->consumer->key = $params['oauth_consumer_key'];
  } else {
    //$params['oauth_consumer_key'] = $request->consumer->key = 401055340;
    drupal_set_message('必须提供 sina app key', 'error');
    return false;
  }
  
  if (isset($params['oauth_consumer_secret']) && $params['oauth_consumer_secret']) {
    $request->consumer->secret = $params['oauth_consumer_secret'];
    unset($params['oauth_consumer_secret']);
  } else {
    $request->consumer->secret = NULL;
  }
  
  // 访问令牌
  $request->token = NULL;
  if (isset($params['oauth_access_token_key'])) {
    $request->token->key = $params['oauth_access_token_key'];
    unset($params['oauth_access_token_key']);
  }
  
  if (isset($params['oauth_access_token_secret'])) {
    $request->token->secret = $params['oauth_access_token_secret'];
    unset($params['oauth_access_token_secret']);
  }
  
  if (!$request->token && $GLOBALS['user']->uid > 0) {
    $request->token = sina_open_get_access_token($GLOBALS['user']->uid);
  }
  
  if ($request->token->key && !isset($params['oauth_token'])) {
    $params['oauth_token'] = $request->token->key;
  }
  
  if (isset($params['http_method'])) {
    $request->http_method = $params['http_method'];
    unset($params['http_method']);
  } else {
    $request->http_method = 'POST';
  }
  
  if (isset($params['http_url'])) {
    $request->http_url = $params['http_url'];
    unset($params['http_url']);
  } else {
    return false;
  }
  
  // 参数中不允许包含签名
  if (isset($params['oauth_signature'])) {
    unset($params['oauth_signature']);
  }
  
  $keys = sina_open_urlencode_rfc3986(array_keys($params));
  $values = sina_open_urlencode_rfc3986(array_values($params));
  $params = array_combine($keys, $values);
  
  uksort($params, 'strcmp');

  if(sizeof($unsignature_params)!=0){
  	$unsignature_keys = array_keys($unsignature_params);
  	$unsignature_values = array_values($unsignature_params);
  }
  uksort($unsignature_params, 'strcmp');

  $pairs = $urls = $unsignature_pairs = $unsignature_urls = array();
  
  foreach ($params as $key => $value ) {
    if (is_array($value)) {
      natsort($value);
      
      foreach ($value as $v2) {
        $pairs[] = $key . '=' . $v2;
        $urls[] = $key . '[]=' . $v2;
      }
    } else {
      $pairs[] = $key . '=' . $value;
      $urls[] = $key . '=' . $value;
    }
  }
  /*
  foreach ($unsignature_pairs as $unsignature_keys => $unsignature_values ) {
    if (is_array($unsignature_values)) {
      natsort($unsignature_values);
      
      foreach ($value as $v2) {
        $unsignature_pairs[] = $unsignature_keys . '=' . $v2;
        $unsignature_urls[] = $unsignature_keys . '[]=' . $v2;
      }
    } else {
      $unsignature_pairs[] = $unsignature_keys . '=' . $unsignature_values;
      $unsignature_urls[] = $unsignature_keys . '=' . $unsignature_values;
    }
  }
  */
  
  $parts = array($request->http_method, $request->http_url, implode('&', $pairs));
  
  // 待签名基本字符串
  $request->base_string = implode('&', sina_open_urlencode_rfc3986($parts));
  
  if ($request->consumer->secret) {
  
    $key_parts = array(
      $request->consumer->secret,
      $request->token ? $request->token->secret : ""
    );
    
    $key_parts = sina_open_urlencode_rfc3986($key_parts);
    $key = implode('&', $key_parts);
    
    $request->sign = base64_encode(hash_hmac('sha1', $request->base_string, $key, true));
    
  } else {
    $request->sign = sina_open_http_get_sign(
      $request->consumer->key,
      $request->base_string,
      ($request->token ? $request->token->secret : "")
    );
  }
  
  
  if (!$request->sign) {
    drupal_set_message('无法取得签名', 'error');
    return false;
  }
  
  // Authorization: OAuth oauth_consumer_key="406362050",oauth_signature_method="HMAC-SHA1",oauth_timestamp="1301451901",oauth_nonce="329917789",oauth_version="1.0",oauth_token="9858b4a2055d50997ec9a826d4814d5f",oauth_signature="aP%2BuQD6wsbHfgEzuf8YN8tLxVtA%3D"
 
 //$request->header['Authorization'] = 'OAuth oauth_consumer_key="' . $consumer_key . '",oauth_signature_method="HMAC-SHA1",oauth_timestamp="' .  $oauth_timestamp . '",oauth_nonce="' . $oauth_nonce . '",oauth_version="1.0",oauth_token="' . $request->token->key . '",oauth_signature="'.sina_open_urlencode_rfc3986($request->sign). '",source="'.$consumer_key.'"';
 
 $request->header['Authorization'] = 'OAuth oauth_consumer_key="' . $consumer_key . '",oauth_signature_method="HMAC-SHA1",oauth_timestamp="' .  $oauth_timestamp . '",oauth_nonce="' . $oauth_nonce . '",oauth_version="1.0",oauth_token="' . $request->token->key . '",oauth_signature="'.sina_open_urlencode_rfc3986($request->sign). '"';
  
 // $urls[] = 'pic='.implode('&',sina_open_urlencode_rfc3986($unsignature_params)).'&oauth_signature='.sina_open_urlencode_rfc3986($request->sign);
  
  $urls[] = 'oauth_signature='.sina_open_urlencode_rfc3986($request->sign).'&pic='.implode('&',sina_open_urlencode_rfc3986($unsignature_params));
  
  $request->to_data = implode('&', $urls);
  
  return $request;
}



/**
 * 远程获取签名，若自行申请 sina app key，不需要远程获取
 * @param (int) $consumer_key
 * @param (string) $base_string
 * @param (string) $token_secret
 */
function sina_open_http_get_sign($consumer_key, $base_string, $token_secret = NULL) {
  $headers = array(
    'User-Agent' => 'Sae T OAuth v0.2.0-beta2',
    'Content-Type' => 'application/x-www-form-urlencoded; charset=utf-8'
  );
  
  $data = 'consumer_key='.sina_open_urlencode_rfc3986($consumer_key). '&';
  $data .= 'base_string='.sina_open_urlencode_rfc3986($base_string);
  
  if ($token_secret) {
    $data .= '&token_secret='.sina_open_urlencode_rfc3986($token_secret);
  }
  
  $data .= '&base_url='.sina_open_urlencode_rfc3986($GLOBALS['base_url']);
  
  $result = drupal_http_request('http://www.didaah.org/sot?op=get_sign', $headers, 'POST', $data);
  
  if ($result->code == 200 && $result->data && substr($result->data, 0, 2) == 'ok') {
    return substr($result->data, 2);
  }
}

/**
 * 将 destination 参数注销，防止使用 drupal_goto 时，跳转到该地址
 */
function sina_open_get_redirect() {
  if (isset($_REQUEST['destination'])) {
    if (!isset($_REQUEST['redirect'])) {
      $_REQUEST['redirect'] = $_REQUEST['destination'];
    }
    unset($_REQUEST['destination']);
  }
  
  if (isset($_REQUEST['redirect'])) {
    return 'redirect='.$_REQUEST['redirect'];
  }
}

/**
 * 获取授权令牌，让用户使用此链接跳转到新浪进行授权
 * @param (array) $values
 */
function sina_open_t_login_url(array $values = array()) {
  if (!isset($values['http_url'])) {
    // 请求未授权令牌 url
    $values['http_url'] = 'http://api.t.sina.com.cn/oauth/request_token';
  }
  
  if (isset($_GET['oauth_callback'])) {
    $oauth_callback = $_GET['oauth_callback'];
  } else if (isset($values['oauth_callback'])) {
    $oauth_callback = $values['oauth_callback'];
    unset($values['oauth_callback']);
  } else {
    if ($redirect = sina_open_get_redirect()) {
      $redirect = '&' . $redirect;
    } else {
      $redirect = '';
    }
    $oauth_callback = url('sina_open/t_login', array('query' => 'op=validate'.$redirect, 'absolute' => true));
  }
  
  if (!$request = sina_open_t_get_request($values)) {
    return false;
  }
  
  $headers = array(
    'User-Agent' => 'Sae T OAuth v0.2.0-beta2',
    'Content-Type' => 'application/x-www-form-urlencoded; charset=utf-8'
  );
  
  $result = drupal_http_request($request->http_url, $headers, 'POST', $request->to_data);
  if ($result->data && strpos($result->data, 'oauth_token_secret') !== false) {
    $token = sina_open_parse_parameters($result->data);
    if ($token['oauth_token_secret']) {
      $tok = new stdClass;
      $tok->key = $token['oauth_token'];
      $tok->secret = $token['oauth_token_secret'];
      
      //whx here
     // sina_open_get_access_token($uid = 0)$_SESSION['keys']=$token;
      
      $_SESSION['sina_t_oauth_token'] = $tok;
      
      $url = 'http://api.t.sina.com.cn/oauth/authenticate';
      $url .= '?oauth_token='.$token['oauth_token'];
      $url .= '&oauth_callback='.urlencode($oauth_callback);
      return $url;
    }
  }
  
  // 未能成功获取授权令牌
  
  return false;
}

/**
 * 获取访问令牌，用户已授权，根据授权令牌获得访问令牌
 * @param (array) $values
 */
function sina_open_t_access_token(array $values = array()) {
  if (!isset($values['http_url'])) {
    $values['http_url'] = 'http://api.t.sina.com.cn/oauth/access_token';
  }
  
  if (!isset($values['oauth_verifier']) && isset($_GET['oauth_verifier'])) {
    $values['oauth_verifier'] = $_GET['oauth_verifier'];
  }
  
  if (!isset($values['oauth_token']) && isset($_GET['oauth_token'])) {
    $values['oauth_token'] = $_GET['oauth_token'];
  }
  
  if (!isset($values['oauth_access_token_key']) && isset($_SESSION['sina_t_oauth_token'])) {
    $values['oauth_access_token_key'] = $_SESSION['sina_t_oauth_token']->key;
    $values['oauth_access_token_secret'] = $_SESSION['sina_t_oauth_token']->secret;
  }
  
  $result = sina_open_t_set_request($values['http_url'], $values);
  
  if ($result->data) {
    $token = sina_open_parse_parameters($result->data);
    if ($token['oauth_token_secret']) {
      unset($_SESSION['sina_t_oauth_token']);
      $tok = new stdClass;
      
      // 访问令牌
      $tok->key = $token['oauth_token'];
      $tok->secret = $token['oauth_token_secret'];
      $tok->verifier = $values['oauth_verifier'];
      
      return $tok;
    }
  }
}

/**
 * 执行一个 http 请求
 */
function sina_open_t_set_request($http_url, array $values = array(), array $headers = array(), $method = 'POST') {
  if (!isset($headers['User-Agent'])) {
    $headers['User-Agent'] = 'Sae T OAuth v0.2.0-beta2';
  }
  
  if (!isset($headers['Content-Type'])) {
    $headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';
   
  }
  
  $values['http_url'] = $http_url;
  $values['http_method'] = $method;
  
  if (!$request = sina_open_t_get_request($values)) {
    return false;
  }
  
 //echo '<br><br>sina_open_t_set_request::request::::'.var_export($request,true).'<br><br>request->http_url:::'.var_export($request->http_url,true).'<br><br>headers:::'.var_export($headers,true).'<br><br>method:::'.var_export($method,true).'<br><br>request->to_data:::'.var_export($request->to_data,true).'<br><br>';
 
  return drupal_http_request($request->http_url, $headers, $method, $request->to_data);
}

/**
 * 获取用户绑定的微博基本信息
 */
function sina_open_t_get_info($ac) {
  $data = db_fetch_object(db_query('SELECT uid, token FROM {sina_open_user} WHERE uid = %d', $ac->uid));
  
  if (isset($data->uid)) { 
    if ($result = sina_open_t_set_request('http://api.t.sina.com.cn/account/verify_credentials.json')) {
      if ($result->code == 200) {
        
        $data = json_decode($result->data);
        
      } else {
        drupal_set_message('授权已过期，请重新获取授权', 'error');
      }
      
    }
  } else {
    drupal_set_message('还没有绑定微博', 'error');
  }
  
  return $data;
}

/**
 * 发布微博表单
 * @param (array) &$form_state
 * @param (int) $uid
 */
function sina_open_set_tweet_form(&$form_state, $uid) {
  $form['sina_open_tweet_text'] = array(
    '#type' => 'textarea',
    '#title' => '发布到新浪微博',
    '#description' => '最多140个字符，中英文均算一个字符。还可以输入<strong id="sina_open_tweet_text_count"></strong>个字符。',
    '#required' => 1
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => '确认发布'
  );
  drupal_add_js(drupal_get_path('module', 'sina_open') .'/sina_open.js');
  return $form;
}

function sina_open_set_tweet_form_validate($form, &$form_state) {
  $form_state['values']['sina_open_tweet_text'] = trim($form_state['values']['sina_open_tweet_text']);
  if (drupal_strlen($form_state['values']['text']) > 140) {
    form_set_error('sina_open_tweet_text', '不大于 140 个字符');
  } else if (!sina_open_t_set_tweet($form_state['values']['sina_open_tweet_text'])) {
    form_set_error('sina_open_tweet_text', '请重试');
  }
}

/**
 * 发送一条微博
 * @param (string) $text
 *  文字内容
 * @param (string) $url
 *  访问地址
 */
function sina_open_t_set_tweet($text, $url = NULL) {
  if (isset($url)) {
    $len = drupal_strlen($url);
  } else {
    $len = 0;
  }
  
  $len = 140 - drupal_strlen($text) + $len;
  
  if ($len < 0) {
    $text = drupal_substr($text, 0, $len);
  }
  
  $result = sina_open_t_set_request(
    'http://api.t.sina.com.cn/statuses/update.json',
    array('status' => urlencode($text. $url))
  );
  //echo var_export($result,true);
  if ($result->code == 200) {
    drupal_set_message('已成功发送到新浪微博');
  } else {
    drupal_set_message('发送到新浪微博失败', 'error');
    return false;
  }
  
  return $result;
}
/**
 * 发送一条微博
 * @param (string) $text
 *  文字内容
 * @param (string) $pic_path
 *  图片地址
 * @param (string) $url
 *  访问地址
 */
/*
function sina_open_t_set_pic_tweet($text, $pic_name, $url = NULL) {
 
 if (isset($url)) {
    $len = drupal_strlen($url);
  } else {
    $len = 0;
  }
  
  $len = 140 - drupal_strlen($text) + $len;
  
  if ($len < 0) {
    $text = drupal_substr($text, 0, $len);
  }
  
	//$pic_path = file_create_path(file_directory_path().'/'.$pic_name);
	$pic_path = file_create_path(file_directory_path().'/ebook_logo.gif');
	$pic = file_get_contents($pic_path);
	
	file_put_contents(file_directory_path().'/whx123.gif', $pic);
	//$pic = '';
	
	$headers['Content-Type'] = 'multipart/form-data';
	//$headers['Content-Type'] = ' multipart/form-data; charset=utf-8; boundary='.uniqid('------------------');
	//$headers['Authorization'] = ' OAuth oauth_consumer_key="2784147378",oauth_signature_method="HMAC-SHA1",oauth_timestamp="1312941164",oauth_nonce="5306b0ec1fd947427c7d12368ea8d6a8",oauth_version="1.0",oauth_token="b8a8e44e835c6fbeb0ca06988725a941",oauth_signature="oYJOxjxWOYLNNvvOVh1UKhoH7V4%3D",source="2784147378"';
	

   $result = sina_open_t_set_pic_request(
  	//	'http://api.t.sina.com.cn/statuses/update.json',
   		'http://api.t.sina.com.cn/statuses/upload.json',
		array(
			//'status' => urlencode($text. $url)
			'status' =>  urlencode( urlencode('abc'))
			//,'lat' => 29.50,
			//'lang' => 105.29
		)
		,array('pic' => $pic)
		,$headers
  	);
  
  $result = sina_open_t_set_request(
  	'http://api.t.sina.com.cn/statuses/update.json',
    array(
    	'status' => urlencode($text. $url)
    )
    //,$headers
  );
 
  echo var_export($result,true);
  
  if ($result->code == 200) {
    drupal_set_message(var_export($result,true).'已成功发送到新浪微博');
  } else {
    drupal_set_message(var_export($result,true).'发送到新浪微博失败', 'error');
    return false;
  }
  
  return $result;
}
*/
 
function sina_open_t_set_pic_tweet($text, $pic_name, $url = NULL) {
  if (isset($url)) {
    $len = drupal_strlen($url);
  } else {
    $len = 0;
  }
  
  $len = 140 - drupal_strlen($text) + $len;
  
  if ($len < 0) {
    $text = drupal_substr($text, 0, $len);
  }	
	
//$o = new WeiboOAuth( WB_AKEY , WB_SKEY  );

//$keys = $o->getRequestToken();
//$aurl = $o->getAuthorizeURL( $keys['oauth_token'] ,false , $_SERVER['SCRIPT_URI'].'/callback.php');

//$_SESSION['keys'] = $keys;

//echo var_export($_SESSION,true);
//whx here SDKs bao
/*
$o = new WeiboOAuth( WB_AKEY , WB_SKEY , $_SESSION['keys']['oauth_token'] , $_SESSION['keys']['oauth_token_secret']  );
$last_key = $o->getAccessToken( $_SESSION['verifier'] ) ;
$_SESSION['last_key'] = $last_key;
*/
	//here end
	global $user;
	$token = sina_open_get_access_token($user->uid);
	$_SESSION['keys']['oauth_token'] = $token->key;
	$_SESSION['keys']['oauth_token_secret'] = $token->secret;

$c = new WeiboClient( WB_AKEY , WB_SKEY , $_SESSION['keys']['oauth_token'] , $_SESSION['keys']['oauth_token_secret']  );
$ms  = $c->home_timeline(); // done
$me = $c->verify_credentials();

	
	// 需要上传的图片所在路径
	//$pic_path = file_create_path(file_directory_path().'/'.$pic_name);
	$pic_path = file_create_path(file_directory_path().'/ebook_logo.gif');
	
	//$pic = file_get_contents($pic_path);
	
	$result = $c ->upload( $text , $pic_path);

	echo 'c::<br>'.var_export($ms,true).var_export($_SESSION,true).'<br><br>memememename:<br>'.$me['name'].'<br><br>result:<br>'.var_export($result,true).' <br>pic_path:<br>'.$pic_path;
	
	
	 if ($result['code'] == 200) {
    	drupal_set_message('已成功发送到新浪微博');
	  } else {
		drupal_set_message('发送到新浪微博失败', 'error');
		return false;
	  }
	
	  return $result;
}

/*

function bstr2bin($input)
// Binary representation of a binary-string
{
  if (!is_string($input)) return null; // Sanity check
  // Unpack as a hexadecimal string
  $value = unpack('H*', $input);
 
  // Output binary representation
  $value = str_split($value[1], 1);
  $bin = '';
  foreach ($value as $v)
  {
   $b = str_pad(base_convert($v, 16, 2), 4, '0', STR_PAD_LEFT);
   
   $bin .= $b;
  }
 
  return $bin;
}

*/


/**
 * 验证当前用户新浪微博访问令牌是否过期，若过期则尝试使用旧的验证码再次获取，不成功则提示
 * @param (bool) $clear
 *  立即验证
 */
function sina_open_is_token($clear = NULL) {
  global $user;
  
  if ($user->uid > 0) {
    
    if (!isset($clear)) {
      
      if (isset($_SESSION['sina_open_is_validate_timestamp'])) {
        if ($_SESSION['sina_open_is_validate_timestamp'] === true) {
          // 用户没有绑定新浪微博
          return true;
        } else if (($_SERVER['REQUEST_TIME']-300) < $_SESSION['sina_open_is_validate_timestamp']) {
          // 上次验证在五分钟之内
          return true;
        }
      }
    
    }
    if ($o = db_fetch_object(db_query("SELECT sina_uid, uid, token FROM {sina_open_user} WHERE sina_name = '%s'", $user->name))) {
      
      if ($o->token) {
        $_SESSION['sina_t_oauth_access_token'] = unserialize($token);
      }
      
      $_SESSION['sina_open_is_validate_timestamp'] = $_SERVER['REQUEST_TIME'];
      
    } else {
      $_SESSION['sina_open_is_validate_timestamp'] = true;
    }
    
    if (isset($_SESSION['sina_t_oauth_access_token'])) {
      $result = sina_open_t_set_request('http://api.t.sina.com.cn/account/verify_credentials.json');
      if ($result->code == 200) {
        
        if (empty($o->sina_uid)) {
          $json = json_decode($result->data);
          if (!empty($json->id)) {
            db_query("UPDATE {sina_open_user} SET sina_uid = '%s' WHERE uid = %d", $json->uid, $user->uid);
          }
        }
        
        return true;
      } else if ($tok = sina_open_t_access_token()) {
        // 尝试使用旧的 token 和 verify 重新获取访问令牌
        return true;
      } else {
        unset($_SESSION['sina_t_oauth_access_token']);
        drupal_set_message('您的新浪微博授权已经过期，请'.l('点击这儿', 'sina_open/t_login').'重新授权');
      }
    }
    
  }
}

/* 实现区块钩子 */

function sina_open_block($op = 'list', $delta = 0, $edit = array()){
	switch ($op){
		case 'list':
			//我的悠游区快
			$blocks[0]['info'] = t('用户信息');
			$blocks[0]['cache'] = BLOCK_NO_CACHE;
			
			//阅读本书的微博用户
			$blocks[1]['info'] = t('阅读本书的微博用户');
			$blocks[1]['cache'] = BLOCK_NO_CACHE;
			
			//悠粉
			$blocks[2]['info'] = t('悠粉');
			$blocks[2]['cache'] = BLOCK_NO_CACHE;
			
			//受欢迎的书
			$blocks[3]['info'] = t('受欢迎的书');
			$blocks[3]['cache'] = BLOCK_NO_CACHE;
			
			//热评的书
			$blocks[4]['info'] = t('热评的书');
			$blocks[4]['cache'] = BLOCK_NO_CACHE;
			
			//书评
			$blocks[5]['info'] = t('正在进行的热评...');
			$blocks[5]['cache'] = BLOCK_NO_CACHE;
			

       return  $blocks;               

		case 'view':
			global $user;
			if ($delta == 0 ) {
				$block['subject'] = t('用户信息');
                $block['content'] = theme('sina_open_user_info_block',array());
			}
			if ($delta == 1 ) {
				$block['subject'] = t('阅读本书的微博用户');
                $block['content'] = theme('sina_open_yuedu_block',array());
			}
			if ($delta == 2 ) {
				$block['subject'] = t('悠粉');
                $block['content'] = theme('sina_open_fans_block',array());
			}
			
			if ($delta == 3 ) {
				$block['subject'] = t('受欢迎的书');
                $block['content'] = theme('sina_open_popular_book_block',array());
			}
			
			if ($delta == 4 ) {
				$block['subject'] = t('热评的书');
                $block['content'] = theme('sina_open_popular_comment_book_block',array());
			}
			
			if ($delta == 5 ) {
				$block['subject'] = t('正在进行的热评...');
                $block['content'] = theme('sina_open_comment_trends_block',array());
			}
			
			
		return  $block;      
	}
}

/**
 * 实现hook_theme钩子
 */
 
function sina_open_theme(){
	return array(
	  //用户信息
    	'sina_open_user_info_block' => array(
			'variables' => array(),
			'file' => 'sina_open.pages.inc',
    	),
      //阅读本书的微博用户
    	'sina_open_yuedu_block' => array(
			'variables' => array(),
			'file' => 'sina_open.pages.inc',
    	),
    	
   //悠粉
    	'sina_open_fans_block' => array(
			'variables' => array(),
			'file' => 'sina_open.pages.inc',
    	),
   //受欢迎的书
    	'sina_open_popular_book_block' => array(
			'variables' => array(),
			'file' => 'sina_open.pages.inc',
   	 	),
   //热评的书
    	'sina_open_popular_comment_book_block' => array(
			'variables' => array(),
			'file' => 'sina_open.pages.inc',
    	),
   //书评
    	'sina_open_comment_trends_block' => array(
			'variables' => array(),
			'file' => 'sina_open.pages.inc',
    	),
    );  
}